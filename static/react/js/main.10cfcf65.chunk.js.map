{"version":3,"sources":["utils/context.js","components/Home.js","components/PredictorForm.js","components/Result.js","components/Login.js","components/Register.js","components/Auth.js","App.js","index.js"],"names":["Context","createContext","Home","to","PredictorForm","history","useHistory","context","useContext","useState","pregnancies","setPregnancies","glucose","setGlucose","bloodpressure","setBloodpressure","skinthickness","setSkinthickness","insulin","setInsulin","bmi","setBmi","dpf","setDpf","age","setAge","handleSubmit","e","a","preventDefault","fetch","method","headers","body","JSON","stringify","response","json","assignPredictionFunction","push","onSubmit","className","type","placeholder","onChange","target","value","Result","result","statePrediction","Login","props","showPasswordIcon","passwordType","email","setEmail","password","setPassword","fName","setFName","lName","setLName","showPassword","setShowPassword","loading","setLoading","defaultOptions","loop","autoplay","animationData","loadingData","rendererSettings","preserveAspectRatio","assignTokenFunction","token","firstName","lastName","assignLogNotif","message","assignAuthEmail","onClick","disabled","options","height","width","Register","regFormPage","confirmPasswordType","showConfirmPasswordIcon","setFirstName","setLastName","confirmPassword","setConfirmPassword","phoneNumber","setPhoneNumber","nameEmailPassword","setNameEmailPassword","showConfirmPassword","setShowConfirmPassword","submittedOnce","setSubmittedOnce","firstNameError","setFirstNameError","lastNameError","setLastNameError","emailError","setEmailError","phoneNumberError","setPhoneNumberError","passwordError","setPasswordError","firstNameShake","setFirstNameShake","lastNameShake","setLastNameShake","emailShake","setEmailShake","phoneNumberShake","setPhoneNumberShake","passwordShake","setPasswordShake","firstNameBorder","lastNameBorder","emailBorder","phoneNumberBorder","passwordBorder","errorCheckSubmit","healthCard","assignRegNotif","validateEmail","address","test","isNumber","phone","clearShake","length","showHiddenDiv","Auth","gradientDisplay","resizeTimer","regNotificationDisplay","logNotificationDisplay","loginRegister","setLoginRegister","regNotification","setRegNotification","logNotification","setLogNotification","regShow","setRegShow","logShow","setLogShow","authEmail","setAuthEmail","useEffect","match","params","window","addEventListener","document","classList","add","clearTimeout","setTimeout","remove","handleResendToken","Alert","variant","onClose","dismissible","Heading","Button","CSSTransition","in","timeout","classNames","unmountOnExit","regNotif","logNotif","App","prediction","setPrediction","setToken","Provider","pred","assignPrediction","stateToken","assignToken","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"js/main.10cfcf65.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst Context = createContext();\r\n\r\nexport default Context;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <h1>Home</h1>\r\n            <Link to='/predict'>Go To Predictor</Link><br />\r\n            <Link to='/auth'>Go To Login/Register</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useContext } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport Context from '../utils/context';\r\n\r\nconst PredictorForm = () => {\r\n    //Values that give a prediction outcome of True (Have Diabetes) for\r\n    //the Random Forest Classification model:\r\n    \r\n    //const testData = {\r\n    //    pregnancies: 1,\r\n    //    glucose: 117,\r\n    //    bloodpressure: 88,\r\n    //    skinthickness: 24,\r\n    //    insulin: 145,\r\n    //    bmi: 34.5,\r\n    //    dpf: 0.403,\r\n    //    age: 40\r\n    //}\r\n    \r\n    let history = useHistory();\r\n    const context = useContext(Context);\r\n\r\n    const [pregnancies, setPregnancies] = useState(0);\r\n    const [glucose, setGlucose] = useState(0);\r\n    const [bloodpressure, setBloodpressure] = useState(0);\r\n    const [skinthickness, setSkinthickness] = useState(0);\r\n    const [insulin, setInsulin] = useState(0);\r\n    const [bmi, setBmi] = useState(0);\r\n    const [dpf, setDpf] = useState(0);\r\n    const [age, setAge] = useState(0);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n            const response = await fetch('/api/predict', {\r\n                method: 'POST',\r\n                headers: {\r\n                'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    pregnancies,\r\n                    glucose,\r\n                    bloodpressure,\r\n                    skinthickness,\r\n                    insulin,\r\n                    bmi,\r\n                    dpf,\r\n                    age\r\n                })\r\n            })\r\n\r\n            const json = await response.json();\r\n            context.assignPredictionFunction(json[0])\r\n            history.push('/results')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Predictor Form</h1>\r\n            \r\n            <form onSubmit={handleSubmit} className=\"predict-container\">\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Pregnancies\" onChange={e => setPregnancies(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Glucose\" onChange={e => setGlucose(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Bloodpressure\" onChange={e => setBloodpressure(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Skinthickness\" onChange={e => setSkinthickness(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Insulin\" onChange={e => setInsulin(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Bmi\" onChange={e => setBmi(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Dpf\" onChange={e => setDpf(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Age\" onChange={e => setAge(e.target.value)}/>\r\n                <button className=\"predict-form-item\" type=\"submit\">Predict</button>\r\n            </form>\r\n            <Link to='/'>Go Home</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default PredictorForm;","import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Context from '../utils/context';\r\n\r\nconst Result = () => {\r\n    const context = useContext(Context);\r\n    let result;\r\n\r\n    if (context.statePrediction) {\r\n        result = <h2 className='result-bad'>Oops! You have DIABETES.</h2>;\r\n    }\r\n    else {\r\n        result = <h2 className='result-good'>Great! You DON'T have diabetes.</h2>;\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Results</h1>\r\n            {result}\r\n            <Link to='/predict'>Go to Predictor</Link>\r\n            <br />\r\n            <Link to='/'>Go home</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result;\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport '../css/Login.css';\r\nimport Context from '../utils/context'\r\nimport Lottie from 'react-lottie';\r\nimport loadingData from '../lotties/loading';\r\n\r\nconst Login = (props) => {\r\n    const context = useContext(Context);\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [fName, setFName] = useState('');\r\n    const [lName, setLName] = useState('');\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    let showPasswordIcon;\r\n    let passwordType;\r\n\r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: loadingData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: \"xMidYMid slice\"\r\n        }\r\n      };\r\n\r\n    const handleSubmit = async e => {\r\n        \r\n        e.preventDefault();\r\n        let response;\r\n        let json;\r\n\r\n        setLoading(true);\r\n\r\n        //Post email and password to back end and get authenticated\r\n        response = await fetch('/api/login', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email,\r\n                password\r\n            })\r\n        })\r\n\r\n        json = await response.json();\r\n        context.assignTokenFunction(json.token);\r\n\r\n\r\n        if (json.token){\r\n            response = await fetch('/api/user', {headers: { 'x-access-tokens': json.token}});\r\n            json = await response.json();\r\n            setLoading(false);\r\n            setFName(', ' + json.firstName);\r\n            setLName(json.lastName);\r\n            props.assignLogNotif([]);\r\n        } else if (json.message === 'User is not verified'){\r\n            setLoading(false)\r\n            props.assignAuthEmail(email);\r\n            props.assignLogNotif(['Account not verified!', 'This account has not yet been verified. If you are the owner of this account and did not recieve a verification email, please click Resend to send another verification link to your email.', 'warning']);\r\n        } else if (json.message === 'A user with this email does not exist.') {\r\n            setLoading(false)\r\n            props.assignLogNotif(['Account not found!', 'A user with this email does not exist.', 'danger']);\r\n        } else if (json.message === 'Your email or password is incorrect') {\r\n            setLoading(false)\r\n            props.assignLogNotif(['Invalid Credentials!', 'Your email or password is incorrect.', 'danger']);\r\n        }\r\n        \r\n    }\r\n\r\n    if (showPassword) {\r\n        showPasswordIcon = (\r\n            <div className='hide-password' onClick={() => setShowPassword(false)}></div>\r\n        );\r\n\r\n        passwordType = 'text';\r\n    } else {\r\n        showPasswordIcon = (\r\n            <div className='show-password' onClick={() => setShowPassword(true)}></div>\r\n        );\r\n\r\n        passwordType = 'password';\r\n    }\r\n\r\n    //Password field should be secured and should not be openly updated in state\r\n\r\n    return (\r\n        <div className='login-container'>\r\n            <h1 className='welcome-message'>Welcome{fName} {lName}</h1>\r\n            <form className='login-form' onSubmit={handleSubmit}>\r\n                <input className='login-form-item login-input' type='text' placeholder='Email' onChange={e => setEmail(e.target.value)}/>\r\n                <div className='password-container'>\r\n                    <input className='password-item login-input' type={passwordType} placeholder='Password' onChange={e => setPassword(e.target.value)}/>\r\n                    {showPasswordIcon}\r\n                </div>\r\n                <button className='login-form-item login-button' type='submit' disabled={loading}>\r\n                    {!loading && 'Sign in'}\r\n                    {loading && <Lottie options={defaultOptions} height={75} width={75}></Lottie>}\r\n                </button>\r\n                \r\n            </form>\r\n            <h5 className='forgot-password'>Forgot your password?</h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, { useState, useEffect } from 'react';\r\nimport '../css/Register.css';\r\nimport Lottie from 'react-lottie';\r\nimport loadingData from '../lotties/loading';\r\n\r\nconst Register = (props) => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n\r\n    const [nameEmailPassword, setNameEmailPassword] = useState(0);\r\n\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n\r\n    const [submittedOnce, setSubmittedOnce] = useState(false);\r\n    const [submitted, setSubmitted] = useState(false);\r\n\r\n    const [firstNameError, setFirstNameError] = useState('');\r\n    const [lastNameError, setLastNameError] = useState('');\r\n    const [emailError, setEmailError] = useState('');\r\n    const [phoneNumberError, setPhoneNumberError] = useState('');\r\n    const [passwordError, setPasswordError] = useState('');\r\n\r\n    const [firstNameShake, setFirstNameShake] = useState('');\r\n    const [lastNameShake, setLastNameShake] = useState('');\r\n    const [emailShake, setEmailShake] = useState('');\r\n    const [phoneNumberShake, setPhoneNumberShake] = useState('');\r\n    const [passwordShake, setPasswordShake] = useState('');\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    let regFormPage;\r\n    let passwordType;\r\n    let confirmPasswordType;\r\n    let showPasswordIcon;\r\n    let showConfirmPasswordIcon;\r\n    let showHiddenDiv;\r\n\r\n    let firstNameBorder = 'border-normal';\r\n    let lastNameBorder = 'border-normal';\r\n    let emailBorder = 'border-normal';\r\n    let phoneNumberBorder = 'border-normal';\r\n    let passwordBorder = 'border-normal';\r\n    \r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: loadingData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: \"xMidYMid slice\"\r\n        }\r\n      };\r\n      \r\n    const handleNameNext = (e) => {\r\n        e.preventDefault();\r\n        setNameEmailPassword(1);\r\n        clearShake();\r\n    }\r\n\r\n    const handleEmailNext = (e) => {\r\n        e.preventDefault();\r\n        setNameEmailPassword(2);\r\n        clearShake();\r\n    }\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n\r\n        setLoading(true);\r\n        setSubmittedOnce(true);\r\n        errorCheckSubmit();\r\n\r\n        if (firstNameError || lastNameError || emailError || phoneNumberError || passwordError) {\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        const response = await fetch('/api/register', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                firstName,\r\n                lastName,\r\n                email,\r\n                healthCard: '',\r\n                phoneNumber,\r\n                password,\r\n                confirmPassword\r\n            })\r\n        })\r\n\r\n        const json = await response.json();\r\n\r\n        props.assignAuthEmail(email);\r\n        setLoading(false);\r\n\r\n        if (json.message === 'User Created') {\r\n            props.assignRegNotif(['Registration Successful!', `Thank you for registering ${firstName}, please verify your account by clicking the verification link sent to your email.`, 'success']);\r\n        }\r\n\r\n        else if (json.message === 'A user with this email already exists.') {\r\n            props.assignRegNotif(['Email already in use!',`A user with the email ${email} already exists. Please use another email.`, 'danger']);\r\n        }\r\n    }\r\n\r\n    const validateEmail = address => {\r\n        return /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(address);\r\n    }\r\n\r\n    const isNumber = phone => {\r\n        return /^\\d*$/.test(phone);\r\n    }\r\n\r\n    const clearShake = () => {\r\n        (passwordShake !== '') && setPasswordShake('');\r\n        (emailShake !== '') && setEmailShake('');\r\n        (phoneNumberShake !== '') && setPhoneNumberShake('');\r\n        (firstNameShake !== '') && setFirstNameShake('');\r\n        (lastNameShake !== '') && setLastNameShake('');\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n/////////////// FRONTEND ERROR-CHECKING ////////////////////\r\nconst errorCheckSubmit = () => {\r\n    //Check for Password and Confirm Password errors\r\n    if ((password === '')){\r\n        setPasswordError('A password is required');\r\n        setNameEmailPassword(2);\r\n        setPasswordShake('shake-error');\r\n    }\r\n\r\n    else if ((password.length < 8)) {\r\n        setPasswordError('The password must be at least 8 characters long');\r\n        setNameEmailPassword(2);\r\n        setPasswordShake('shake-error');\r\n    }\r\n\r\n    else if ((password !== confirmPassword)){\r\n        setPasswordError('The passwords do not match');\r\n        setNameEmailPassword(2);\r\n        setPasswordShake('shake-error');\r\n    }\r\n    else {\r\n        setPasswordError('');\r\n        setPasswordShake('');\r\n    }\r\n\r\n    \r\n    //Check for Email errors\r\n    if ((email === '')){\r\n        setEmailError('An email is required');\r\n        setNameEmailPassword(1);\r\n        setEmailShake('shake-error');\r\n    }\r\n    else if ((!validateEmail(email))) {\r\n        setEmailError('You have entered an invalid email');\r\n        setNameEmailPassword(1);\r\n        setEmailShake('shake-error');\r\n    }\r\n    else {\r\n        setEmailError('');\r\n        setEmailShake('');\r\n    }\r\n\r\n    //Check for Phone Number (optional) errors\r\n    if (!isNumber(phoneNumber)) {\r\n        setPhoneNumberError('The phone number may only contain numbers');\r\n        setNameEmailPassword(1);\r\n        setPhoneNumberShake('shake-error');\r\n    }\r\n    else {\r\n        setPhoneNumberError('');\r\n        setPhoneNumberShake('');\r\n    }\r\n\r\n    //Check for First Name errors\r\n    if ((firstName === '')){\r\n        setFirstNameError('A first name is required');\r\n        setNameEmailPassword(0);\r\n        setFirstNameShake('shake-error');\r\n    } \r\n    else {\r\n        setFirstNameError('');\r\n        setFirstNameShake('');\r\n    }\r\n\r\n    //Check for Last Name errors\r\n    if ((lastName === '')){\r\n        setLastNameError('A last name is required');\r\n        setNameEmailPassword(0);\r\n        setLastNameShake('shake-error');\r\n    }\r\n    else {\r\n        setLastNameError('');\r\n        setLastNameShake('');\r\n    }\r\n    \r\n    \r\n}\r\n\r\nconst errorCheckRender = () => {\r\n    //Check for Password and Confirm Password errors\r\n    if ((password === '')){\r\n        (passwordError !== 'A password is required') && setPasswordError('A password is required');\r\n    }\r\n\r\n    else if ((password.length < 8)) {\r\n        (passwordError !== 'The password must be at least 8 characters long') && setPasswordError('The password must be at least 8 characters long');\r\n    }\r\n\r\n    else if ((password !== confirmPassword)){\r\n        (passwordError !== 'The passwords do not match') && setPasswordError('The passwords do not match');\r\n    }\r\n    else {\r\n        (passwordError !== '') && setPasswordError('');\r\n    }\r\n\r\n    \r\n    //Check for Email errors\r\n    if ((email === '')){\r\n        (emailError !== 'An email is required') && setEmailError('An email is required');\r\n    }\r\n    else if ((!validateEmail(email))) {\r\n        (emailError !== 'You have entered an invalid email') && setEmailError('You have entered an invalid email');\r\n    }\r\n    else {\r\n        (emailError !== '') && setEmailError('');\r\n    }\r\n\r\n    //Check for Phone Number (optional) errors\r\n    if (!isNumber(phoneNumber)) {\r\n        (phoneNumberError !== 'The phone number may only contain numbers') && setPhoneNumberError('The phone number may only contain numbers');\r\n    }\r\n    else {\r\n        (phoneNumberError !== '') && setPhoneNumberError('');\r\n    }\r\n\r\n    //Check for First Name errors\r\n    if ((firstName === '')){\r\n        (firstNameError !== 'A first name is required') && setFirstNameError('A first name is required');\r\n    } \r\n    else {\r\n        (firstNameError !== '') && setFirstNameError('');\r\n    }\r\n\r\n    //Check for Last Name errors\r\n    if ((lastName === '')){\r\n        (lastNameError !== 'A last name is required') && setLastNameError('A last name is required');\r\n    }\r\n    else {\r\n        (lastNameError !== '') && setLastNameError('');\r\n    }\r\n}\r\n\r\nerrorCheckRender();\r\n\r\n//Decides whether the password is currently shown or not\r\nif (showPassword) {\r\n    showPasswordIcon = (\r\n        <div className={`hide-password ${passwordShake}`} onClick={() => setShowPassword(false)}></div>\r\n    );\r\n\r\n    passwordType = 'text';\r\n} else {\r\n    showPasswordIcon = (\r\n        <div className={`show-password ${passwordShake}`} onClick={() => setShowPassword(true)}></div>\r\n    );\r\n\r\n    passwordType = 'password';\r\n}\r\n\r\n //Decides whether the confirm password is currently shown or not\r\n if (showConfirmPassword) {\r\n    showConfirmPasswordIcon = (\r\n        <div className={`hide-password ${passwordShake}`} onClick={() => setShowConfirmPassword(false)}></div>\r\n    );\r\n\r\n    confirmPasswordType = 'text';\r\n} else {\r\n    showConfirmPasswordIcon = (\r\n        <div className={`show-password ${passwordShake}`} onClick={() => setShowConfirmPassword(true)}></div>\r\n    );\r\n\r\n    confirmPasswordType = 'password';\r\n}\r\n\r\n//Set error borders on inputs\r\nif (firstNameError) {\r\n    firstNameBorder = 'border-error';\r\n}\r\n\r\nif (lastNameError) {\r\n    lastNameBorder = 'border-error';\r\n}\r\n\r\nif (emailError) {\r\n    emailBorder = 'border-error';\r\n}\r\n\r\nif (phoneNumberError) {\r\n    phoneNumberBorder = 'border-error';\r\n}\r\n\r\nif (passwordError) {\r\n    passwordBorder = 'border-error';\r\n}\r\n\r\n    \r\n////////////////////////////////////////////////////////////\r\n    \r\n\r\n    if (nameEmailPassword === 0) {\r\n        regFormPage = (\r\n            <form className='register-form' onSubmit={handleNameNext}>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? firstNameError : null}</h5>\r\n                <input className={`register-form-item register-input ${(submittedOnce) ? firstNameBorder: 'border-normal'} ${firstNameShake}`} value={firstName} type='text' placeholder='First Name' onChange={e => setFirstName(e.target.value)}/>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? lastNameError : null}</h5>\r\n                <input className={`register-form-item register-input ${(submittedOnce) ? lastNameBorder: 'border-normal'} ${lastNameShake}`} value={lastName} type='text' placeholder='Last Name' onChange={e => setLastName(e.target.value)}/>\r\n                <div className='submission-buttons'>\r\n                    <button className='register-form-item register-button' type='submit'>Next</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    else if (nameEmailPassword === 1) {\r\n        regFormPage = (\r\n            <form className='register-form' onSubmit={handleEmailNext}>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? emailError : null}</h5>\r\n                <input className={`register-form-item register-input ${(submittedOnce) ? emailBorder: 'border-normal'} ${emailShake}`} value={email} type='text' placeholder='Email' onChange={e => setEmail(e.target.value)}/>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? phoneNumberError : null}</h5>\r\n                <input className={`register-form-item register-input ${(submittedOnce) ? phoneNumberBorder: 'border-normal'} ${phoneNumberShake}`} value={phoneNumber} type='text' placeholder='Phone Number' onChange={e => setPhoneNumber(e.target.value)}/>\r\n                <div></div>\r\n                <div className='submission-buttons'>\r\n                    <button className='register-form-item back-button' type='button' onClick={() => setNameEmailPassword(0)}>Back</button>\r\n                    <div className='register-form-item'></div>\r\n                    <button className='register-form-item register-button' type='submit'>Next</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    else {\r\n        regFormPage = (\r\n            <form className='register-form' onSubmit={handleSubmit}>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? passwordError : null}</h5>\r\n                <div className='password-container'>\r\n                    <input className={`password-item register-input ${(submittedOnce) ? passwordBorder: 'border-normal'} ${passwordShake}`} type={passwordType} value={password} placeholder='Password' onChange={e => setPassword(e.target.value)}/>\r\n                    {showPasswordIcon}\r\n                </div>\r\n                <div className='password-container'>\r\n                    <input className={`password-item register-input ${(submittedOnce) ? passwordBorder: 'border-normal'} ${passwordShake}`} type={confirmPasswordType} value={confirmPassword} placeholder='Confirm Password' onChange={e => setConfirmPassword(e.target.value)}/>\r\n                    {showConfirmPasswordIcon}\r\n                </div>\r\n                {showHiddenDiv}\r\n                <div className='submission-buttons'>\r\n                    <button className='register-form-item back-button' type='button' onClick={() => setNameEmailPassword(1)}>Back</button>\r\n                    <div className='register-form-item'></div>\r\n                    <button className='register-form-item register-button' type='submit' disabled={loading}>\r\n                        {!loading && 'Sign up'}\r\n                        {loading && <Lottie options={defaultOptions} height={75} width={75}></Lottie>}\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n     //Password field should be secured and should not be openly updated in state\r\n\r\n    return (\r\n        <div className='register-container'>\r\n            <h1 className='welcome-message'>Create account</h1>\r\n            {regFormPage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Login from './Login';\r\nimport Register from './Register';\r\nimport Lottie from 'react-lottie';\r\nimport { CSSTransition } from 'react-transition-group'; \r\nimport {Alert, Button} from 'react-bootstrap'\r\nimport loadingData from '../lotties/loading';\r\nimport '../css/Auth.css';\r\n\r\nconst Auth = (props) => {\r\n    const [loginRegister, setLoginRegister] = useState(false);\r\n    const [regNotification, setRegNotification] = useState([]);\r\n    const [logNotification, setLogNotification] = useState([]);\r\n    const [regShow, setRegShow] = useState(false);\r\n    const [logShow, setLogShow] = useState(false);\r\n    const [authEmail, setAuthEmail] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    let gradientDisplay;\r\n    let resizeTimer;\r\n    let regNotificationDisplay;\r\n    let logNotificationDisplay;\r\n\r\n    useEffect(async() => {\r\n        const { token } = props.match.params;\r\n        let response;\r\n        let json;\r\n        if (token){\r\n            response = await fetch(`/api/confirm_email/${token}`);\r\n            json = await response.json();\r\n\r\n            if (json.message === 'token_expired') {\r\n                setLogNotification(['Verification Token Expired!', 'Your verification token session has expired. Please press Resend to send another verification link to your email.', 'danger']);\r\n                setLogShow(true);\r\n            }\r\n            else if (json.message === 'email_already_confirmed') {\r\n                setLogNotification(['Account already verified!', 'You have already verified this account.', 'warning']);\r\n                setLogShow(true);\r\n            }\r\n            else if (json.message === 'email_confirm_success') {\r\n                setLogNotification(['Account verified successfully!', 'Thank you for verifying your account. You may now log in.', 'success']);\r\n                setLogShow(true);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    window.addEventListener(\"resize\", () => {\r\n    document.body.classList.add(\"resize-animation-stopper\");\r\n    clearTimeout(resizeTimer);\r\n    resizeTimer = setTimeout(() => {\r\n        document.body.classList.remove(\"resize-animation-stopper\");\r\n    }, 400);\r\n    });\r\n\r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: loadingData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: \"xMidYMid slice\"\r\n        }\r\n      };\r\n\r\n    const assignAuthEmail = (email) => {\r\n        setAuthEmail(email);\r\n    }\r\n\r\n    const assignRegNotif = (regNotif) => {\r\n        setRegNotification(regNotif);\r\n    }\r\n\r\n    const assignLogNotif = (logNotif) => {\r\n        setLogNotification(logNotif);\r\n    }\r\n\r\n    const regNotifClose = () => {\r\n        setRegShow(true);\r\n        setRegNotification([]);\r\n    }\r\n\r\n    const logNotifClose = () => {\r\n        setLogShow(true);\r\n        setLogNotification([]);\r\n    }\r\n\r\n    const handleResendToken = async() => {\r\n        let response;\r\n        let json;\r\n\r\n        setLoading(true);\r\n\r\n        response = await fetch('/api/resendToken', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email: authEmail\r\n            })\r\n        })\r\n\r\n        json = await response.json();\r\n\r\n        setLoading(false);\r\n\r\n\r\n    }\r\n\r\n    //Check for which screen the user is currently on (login or register)\r\n    if (loginRegister) {\r\n            gradientDisplay = ( <div className=\"gradient-display-background gradient-display-background-register\">\r\n                                    <div className='gradient-display gradient-display-register-rtrue'>\r\n                                        <h1 className='gradient-display-text'>Already have an account?</h1>\r\n                                        <button  onClick={() => {\r\n                                            setRegShow(false);\r\n                                            setRegNotification([]);\r\n                                            setLoginRegister(false)}} className='gradient-display-button gradient-display-button-red'>Login</button>\r\n                                    </div>\r\n                                    <div className='gradient-display gradient-display-register-bfalse'></div>\r\n                                </div>);\r\n    }\r\n\r\n    else {\r\n            gradientDisplay = ( <div className=\"gradient-display-background gradient-display-background-login\">\r\n                                    <div className='gradient-display gradient-display-login-rfalse'></div>\r\n                                    <div className='gradient-display gradient-display-login-btrue'>\r\n                                        <h1 className='gradient-display-text'>Don't have an account?</h1>\r\n                                        <button onClick={() => {\r\n                                            setLogShow(false);\r\n                                            setLogNotification([]);\r\n                                            setLoginRegister(true)}} className='gradient-display-button gradient-display-button-blue'>Register</button>\r\n                                    </div>\r\n                                </div>);\r\n    }\r\n\r\n    //Show any registration notifications\r\n    if (regNotification.length) {\r\n        regNotificationDisplay = (  <Alert className='alert-align' variant={regNotification[2]} onClose={() => regNotifClose()} dismissible>\r\n                                        <Alert.Heading>{regNotification[0]}</Alert.Heading>\r\n                                        <p>{regNotification[1]}</p>\r\n                                        {(regNotification[0] === 'Registration Successful!') && (<div className=\"d-flex justify-content-end\">\r\n                                            <Button onClick={() => handleResendToken()} variant=\"outline-success\" disabled={loading}>\r\n                                                {!loading && 'Resend'}\r\n                                                {loading && <Lottie options={defaultOptions} height={35} width={35}></Lottie>}\r\n                                            </Button>\r\n                                        </div>)}\r\n                                    </Alert>);\r\n        (regShow !== true) && setRegShow(true);\r\n    }\r\n\r\n    if (logNotification.length) {\r\n        logNotificationDisplay  = ( <Alert className='alert-align' variant={logNotification[2]} onClose={() => logNotifClose()} dismissible>\r\n                                        <Alert.Heading>{logNotification[0]}</Alert.Heading>\r\n                                        <p>{logNotification[1]}</p>\r\n                                        {(logNotification[0] === 'Account not verified!') && (<div className=\"d-flex justify-content-end\">\r\n                                            <Button onClick={() => handleResendToken()} variant=\"outline-warning\" disabled={loading}>\r\n                                                {!loading && 'Resend'}\r\n                                                {loading && <Lottie options={defaultOptions} height={35} width={35}></Lottie>}\r\n                                            </Button>\r\n                                        </div>)}\r\n                                    </Alert>);\r\n        (logShow !== true) && setLogShow(true);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"auth-container\">\r\n            {gradientDisplay}\r\n\r\n            <div className='fill'>\r\n                \r\n                \r\n                <CSSTransition\r\n                    in={loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"reg-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <div className='auth-notification-container'>\r\n                        {regShow && regNotificationDisplay}\r\n                    </div>\r\n                </CSSTransition>\r\n                \r\n                <CSSTransition\r\n                    in={loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"reg-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <Register assignRegNotif={(regNotif) => assignRegNotif(regNotif)}\r\n                              assignAuthEmail={(email) => assignAuthEmail(email)}/>\r\n                </CSSTransition>\r\n            </div>\r\n            <div className='fill'>\r\n                \r\n                <CSSTransition\r\n                    in={!loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"login-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <div className='auth-notification-container'>\r\n                        {logShow && logNotificationDisplay}\r\n                    </div>\r\n                </CSSTransition>\r\n                <CSSTransition\r\n                    in={!loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"login-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <Login assignLogNotif={(logNotif) => assignLogNotif(logNotif)}\r\n                           assignAuthEmail={(email) => assignAuthEmail(email)}/>\r\n                </CSSTransition>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth;\r\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Context from './utils/context';\nimport Home from './components/Home';\nimport PredictorForm from './components/PredictorForm';\nimport Result from './components/Result';\nimport Auth from './components/Auth';\n\nfunction App() {\n  const [prediction, setPrediction] = useState(false);\n  const [token, setToken] = useState();\n\n  const assignPrediction = (pred) => {\n    setPrediction(pred);\n  }\n\n  const assignToken = (token) => {\n    setToken(token);\n  }\n  \n  return (\n    <Context.Provider value = {{\n      statePrediction: prediction,\n      assignPredictionFunction: (pred) => assignPrediction(pred),\n      stateToken: token,\n      assignTokenFunction: (token) => assignToken(token)\n    }}>\n      <Router>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path='/' component={Home}/>\n            <Route exact path='/predict' component={PredictorForm}/>\n            <Route exact path='/results' component={Result}/>\n            <Route exact path='/auth/:token?' component={Auth}/>\n          </Switch>\n        </div>\n      </Router>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}