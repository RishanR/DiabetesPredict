{"version":3,"sources":["utils/context.js","components/Home.js","components/PredictorForm.js","components/Result.js","components/PredictionHistory.js","components/Predictor.js","components/Login.js","components/Register.js","components/Auth.js","components/Navigation.js","components/TrackerTable.js","components/Tracker.js","App.js","index.js"],"names":["Context","createContext","Home","context","useContext","useLayoutEffect","assignShowNav","PredictorForm","props","useState","pregnancies","setPregnancies","glucose","setGlucose","bloodpressure","setBloodpressure","skinthickness","setSkinthickness","insulin","setInsulin","bmi","setBmi","dpf","setDpf","age","setAge","handleSubmit","e","a","preventDefault","localStorage","getItem","fetch","method","headers","body","JSON","stringify","response1","json","json1","console","log","bp","st","result","response2","json2","assignPredictResults","assignPredictionFunction","assignUpdatePredictHistory","stateUpdatePredictHistory","assignResult","assignResultFace","className","onSubmit","type","placeholder","onChange","target","value","Result","stateResultFace","stateResult","onClick","PredictionHistory","title","field","hidden","defaultSort","render","rowData","columns","data","setData","useEffect","response","userData","deletePrediction","data_id","editable","onRowDelete","oldData","Promise","resolve","reject","setTimeout","dataDelete","index","tableData","id","splice","options","rowStyle","backgroundColor","exportButton","Predictor","useHistory","predictInnerBackground","predictResults","setPredictResults","setResult","resultFace","setResultFace","updatePredictHistory","setUpdatePredictHistory","page","CSSTransition","in","timeout","classNames","unmountOnExit","text","face","update","fill","paused","height","amplitude","speed","points","Login","showPasswordIcon","passwordType","history","email","setEmail","password","setPassword","showPassword","setShowPassword","loading","setLoading","emailElement","useRef","current","focus","currentLocation","state","detail","defaultOptions","loop","autoplay","animationData","loadingData","rendererSettings","preserveAspectRatio","token","setItem","assignFName","firstName","assignLName","lastName","assignLogNotif","goBack","push","message","assignAuthEmail","ref","disabled","width","Register","regFormPage","confirmPasswordType","showConfirmPasswordIcon","setFirstName","setLastName","confirmPassword","setConfirmPassword","phoneNumber","setPhoneNumber","nameEmailPassword","setNameEmailPassword","showConfirmPassword","setShowConfirmPassword","submittedOnce","setSubmittedOnce","firstNameError","setFirstNameError","lastNameError","setLastNameError","emailError","setEmailError","phoneNumberError","setPhoneNumberError","passwordError","setPasswordError","firstNameShake","setFirstNameShake","lastNameShake","setLastNameShake","emailShake","setEmailShake","phoneNumberShake","setPhoneNumberShake","passwordShake","setPasswordShake","firstNameElement","passwordElement","firstNameBorder","lastNameBorder","emailBorder","phoneNumberBorder","passwordBorder","errorCheckSubmit","healthCard","assignRegNotif","validateEmail","address","test","isNumber","phone","clearShake","length","showHiddenDiv","Auth","gradientDisplay","resizeTimer","regNotificationDisplay","logNotificationDisplay","location","useLocation","loginRegister","setLoginRegister","regNotification","setRegNotification","logNotification","setLogNotification","regShow","setRegShow","logShow","setLogShow","authEmail","setAuthEmail","match","params","removeItem","window","addEventListener","document","classList","add","clearTimeout","remove","handleResendToken","Alert","variant","onClose","dismissible","Heading","Button","to","regNotif","logNotif","Navigation","navbarColor","setNavbarColor","rightNav","setRightNav","sign","setSign","stateFName","stateLName","getUserInfo","setRightNavToWelcome","setRightNavToLoginSignup","Nav","Link","pathname","NavDropdown","alignRight","Item","Navbar","collapseOnSelect","expand","bg","Brand","Toggle","aria-controls","Collapse","TrackerTable","onRowAdd","newData","onRowUpdate","dataUpdate","pageSize","Tracker","App","prediction","setPrediction","showNav","setShowNav","setToken","fName","setFName","lName","setLName","Provider","statePrediction","pred","assignPrediction","stateToken","assignTokenFunction","assignToken","stateNav","show","firstname","lastname","exact","path","component","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"js/main.f9e82d66.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst Context = createContext();\r\n\r\nexport default Context;\r\n","import React, { useLayoutEffect, useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport Context from '../utils/context';\r\n\r\nconst Home = () => {\r\n    const context = useContext(Context);\r\n\r\n    useLayoutEffect(() => {\r\n        context.assignShowNav(true);\r\n    }, []);\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Home</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useContext, Fragment } from 'react';\r\nimport Context from '../utils/context';\r\nimport '../css/PredictorForm.css'\r\n\r\nconst PredictorForm = (props) => {\r\n    const context = useContext(Context);\r\n    const [pregnancies, setPregnancies] = useState(0);\r\n    const [glucose, setGlucose] = useState(0);\r\n    const [bloodpressure, setBloodpressure] = useState(0);\r\n    const [skinthickness, setSkinthickness] = useState(0);\r\n    const [insulin, setInsulin] = useState(0);\r\n    const [bmi, setBmi] = useState(0);\r\n    const [dpf, setDpf] = useState(0);\r\n    const [age, setAge] = useState(0);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (localStorage.getItem('token')){\r\n\r\n        \r\n            let response1 = await fetch('/api/predict', {\r\n                method: 'POST',\r\n                headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-access-tokens': localStorage.getItem('token')\r\n                },\r\n                body: JSON.stringify({\r\n                    pregnancies,\r\n                    glucose,\r\n                    bloodpressure,\r\n                    skinthickness,\r\n                    insulin,\r\n                    bmi,\r\n                    dpf,\r\n                    age\r\n                })\r\n            })\r\n\r\n            let json1 = await response1.json()\r\n            console.log(json1[0])\r\n\r\n            let response2 = await fetch('/api/predictData', {\r\n                method: 'POST',\r\n                headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-access-tokens': localStorage.getItem('token')\r\n                },\r\n                body: JSON.stringify({\r\n                    pregnancies,\r\n                    glucose,\r\n                    bp: bloodpressure,\r\n                    st: skinthickness,\r\n                    insulin,\r\n                    bmi,\r\n                    dpf,\r\n                    age,\r\n                    result: json1[0]\r\n                })\r\n            })\r\n\r\n            let json2 = await response2.json();\r\n            console.log(json2);\r\n\r\n            //history.push('/results')\r\n            props.assignPredictResults(1);\r\n\r\n            context.assignPredictionFunction(json1[0])\r\n            props.assignUpdatePredictHistory(!props.stateUpdatePredictHistory)\r\n\r\n            if (json1[0]) {\r\n                props.assignResult('Oh no! You have diabetes!');\r\n                props.assignResultFace(<div className='frown-container'></div>);\r\n            } \r\n            else {\r\n                props.assignResult(\"Great! You don't have diabetes!\");\r\n                props.assignResultFace(<div className='smile-container'></div>);\r\n            }\r\n\r\n        } else {\r\n            console.log('You must be logged in to predict.')\r\n        }\r\n            \r\n    }\r\n    \r\n    return (\r\n        <div className='predictor-form-fill'>\r\n            <h1 className='predict-title'>Do you have <span className='predict-title-diabetes'>diabetes?</span></h1>\r\n                            \r\n            <form onSubmit={handleSubmit} className=\"predict-form\">\r\n                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Pregnancies\" onChange={e => setPregnancies(e.target.value)}/>\r\n                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Glucose\" onChange={e => setGlucose(e.target.value)}/>\r\n                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Bloodpressure\" onChange={e => setBloodpressure(e.target.value)}/>\r\n                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Skinthickness\" onChange={e => setSkinthickness(e.target.value)}/>\r\n                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Insulin\" onChange={e => setInsulin(e.target.value)}/>\r\n                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Bmi\" onChange={e => setBmi(e.target.value)}/>\r\n                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Dpf\" onChange={e => setDpf(e.target.value)}/>\r\n                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Age\" onChange={e => setAge(e.target.value)}/>\r\n                <button className=\"predict-form-item predict-button\" type=\"submit\">Predict</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PredictorForm;\r\n","import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../css/Result.css'\r\n\r\nconst Result = (props) => {\r\n    return (\r\n        <div className='result-container'>\r\n            <h1 className='result-title'>Results</h1>\r\n            {props.stateResultFace}\r\n            <h2>{props.stateResult}</h2>\r\n            <button className='result-form-item result-back-button' type='button' onClick={() => props.assignPredictResults(0)}>Back</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result;\r\n","import React, {useState, useEffect} from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport '../css/PredictionHistory.css';\r\n\r\nconst PredictionHistory = (props) => {\r\n\r\n    const [columns, setColumns] = useState([\r\n        { title: 'ID', field: 'data_id', hidden:true },\r\n        { title: 'Pregnancies', field: 'pregnancies', type: 'numeric' },\r\n        { title: 'Glucose', field: 'glucose', type: 'numeric'},\r\n        { title: 'Bloodpressure', field: 'bp', type: 'numeric' },\r\n        { title: 'Skin Thickness', field: 'st', type: 'numeric' },\r\n        { title: 'Insulin', field: 'insulin', type: 'numeric'},\r\n        { title: 'BMI', field: 'bmi', type: 'numeric' },\r\n        { title: 'DPF', field: 'dpf', type: 'numeric' },\r\n        { title: 'Age', field: 'age', type: 'numeric' },\r\n        { title: 'Date & Time', field: 'dateTime', type: 'datetime', defaultSort: 'desc'},\r\n        {\r\n            title: 'Result',\r\n            field: 'result',\r\n            render: rowData => {\r\n                return(\r\n                (rowData.result) ? <div className='positive-container'>POSITIVE</div> : <div className='negative-container'>NEGATIVE</div>\r\n                );\r\n            }\r\n        }\r\n\r\n      ]);\r\n  \r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect(async () => {\r\n        if (localStorage.getItem('token')){\r\n        \r\n            const response = await fetch('/api/predictData', {\r\n                headers: {\r\n                'x-access-tokens': localStorage.getItem('token')\r\n                }\r\n            });\r\n\r\n            const json = await response.json();\r\n\r\n            setData(json.userData);\r\n\r\n            console.log('updated Prediction History')\r\n        }\r\n    }, [props.stateUpdatePredictHistory]);\r\n\r\n    const deletePrediction = async (data) => {\r\n      const response = await fetch(`/api/predictData/${data.data_id}`,\r\n      {\r\n        method: 'DELETE',\r\n        headers: {\r\n                  'x-access-tokens': localStorage.getItem('token')\r\n                }\r\n      })\r\n\r\n      const json = await response.json();\r\n                  \r\n      console.log(json);\r\n    }\r\n  \r\n    return (\r\n      <MaterialTable\r\n        title=\"Predictions\"\r\n        columns={columns}\r\n        data={data}\r\n        editable={{\r\n          onRowDelete: oldData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                if (localStorage.getItem('token')){\r\n\r\n                  deletePrediction(oldData);\r\n\r\n                  const dataDelete = [...data];\r\n                  const index = oldData.tableData.id;\r\n                  dataDelete.splice(index, 1);\r\n                  setData([...dataDelete]);\r\n                }\r\n                resolve()\r\n              }, 1000)\r\n            }),\r\n        }}\r\n        options={{\r\n            rowStyle: rowData => ({\r\n              backgroundColor: (rowData.tableData.id % 2 === 0) ? '#f6f6f6' : '#e6e6e6'\r\n            }),\r\n            exportButton:true\r\n          }}\r\n      />\r\n    )\r\n  }\r\n\r\n  export default PredictionHistory;","import React, { useState, useContext, useLayoutEffect, Fragment } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport Wave from 'react-wavify';\r\nimport Context from '../utils/context';\r\nimport { CSSTransition } from 'react-transition-group'; \r\nimport '../css/Predictor.css';\r\nimport PredictorForm from './PredictorForm';\r\nimport Result from './Result';\r\nimport PredictionHistory from './PredictionHistory';\r\n\r\nconst Predictor = () => {\r\n    //Values that give a prediction outcome of True (Have Diabetes) for\r\n    //the Random Forest Classification model:\r\n    \r\n    //const testData = {\r\n    //    pregnancies: 1,\r\n    //    glucose: 117,\r\n    //    bloodpressure: 88,\r\n    //    skinthickness: 24,\r\n    //    insulin: 145,\r\n    //    bmi: 34.5,\r\n    //    dpf: 0.403,\r\n    //    age: 40\r\n    //}\r\n    \r\n    let history = useHistory();\r\n    const context = useContext(Context);\r\n\r\n    const [predictResults, setPredictResults] = useState(0);\r\n    const [result, setResult] = useState('');\r\n    const [resultFace, setResultFace] = useState(null);\r\n    const [updatePredictHistory, setUpdatePredictHistory] = useState(false);\r\n\r\n    let predictInnerBackground;\r\n\r\n    useLayoutEffect(() => {\r\n        context.assignShowNav(true);\r\n    }, []);\r\n\r\n    const assignPredictResults = (page) => {\r\n        setPredictResults(page);\r\n    }\r\n\r\n    const assignResult = (text) => { \r\n        setResult(text);\r\n    }\r\n\r\n    const assignResultFace = (face) => {\r\n        setResultFace(face);\r\n    }\r\n\r\n    const assignUpdatePredictHistory = (update) => {\r\n        setUpdatePredictHistory(update);\r\n    }\r\n\r\n    if (predictResults) {\r\n        if (result === 'Oh no! You have diabetes!') {\r\n            predictInnerBackground = 'predict-inner-red';\r\n        }\r\n\r\n        else if (result === \"Great! You don't have diabetes!\") {\r\n            predictInnerBackground = 'predict-inner-green';\r\n        }\r\n    } else {\r\n        console.log('test')\r\n        predictInnerBackground = 'predict-inner-white'\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className='predict-background-container'></div>\r\n            <div className='predict-page-main-container'>\r\n                <div className='predict-main-container'>\r\n                    <div className={`predict-inner-container ${predictInnerBackground}`}>\r\n                        <CSSTransition\r\n                            in={!predictResults}\r\n                            timeout={1000}\r\n                            classNames=\"predict-transition\"\r\n                            unmountOnExit\r\n                        >\r\n                            <div className='predict-form-position'>\r\n                                \r\n                                    <PredictorForm  assignPredictResults={(page) => assignPredictResults(page)}\r\n                                                    assignResult={(text) => assignResult(text)}\r\n                                                    assignResultFace={(face) => assignResultFace(face)}\r\n                                                    assignUpdatePredictHistory={(update) => assignUpdatePredictHistory(update)}\r\n                                                    stateUpdatePredictHistory={updatePredictHistory}/>\r\n                                \r\n                            </div>\r\n                        </CSSTransition>\r\n\r\n                        <CSSTransition\r\n                            in={predictResults}\r\n                            timeout={1000}\r\n                            classNames=\"predict-transition\"\r\n                            unmountOnExit\r\n                        >\r\n                            <div className='predict-form-position'>\r\n                                    <Result className='result-component' assignPredictResults={(page) => assignPredictResults(page)}\r\n                                            stateResult={result}\r\n                                            stateResultFace={resultFace}/>\r\n                            </div>\r\n                        </CSSTransition>\r\n                    </div>                \r\n                </div>\r\n                <div className='prediction-hist-main-container'>\r\n                    <Wave fill='#fff'\r\n                        paused={false}\r\n                        className='predictor-wave predictor-wave-1'\r\n                        options={{\r\n                        height: 15,\r\n                        amplitude: 20,\r\n                        speed: 0.15,\r\n                        points: 4\r\n                        }}\r\n                    />\r\n\r\n                    <Wave fill='#f6f6f6'\r\n                        paused={false}\r\n                        className='predictor-wave predictor-wave-2'\r\n                        options={{\r\n                        height: 20,\r\n                        amplitude: 25,\r\n                        speed: 0.15,\r\n                        points: 3\r\n                        }}\r\n                    />\r\n\r\n                    <h1 className='predict-title'>Prediction History</h1>\r\n                    <PredictionHistory stateUpdatePredictHistory={updatePredictHistory}/>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default Predictor;","import React, { useState, useContext, useEffect, useRef } from 'react';\r\nimport '../css/Login.css';\r\nimport Context from '../utils/context'\r\nimport Lottie from 'react-lottie';\r\nimport loadingData from '../lotties/loading';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Login = (props) => {\r\n    const context = useContext(Context);\r\n    let history = useHistory();\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const emailElement = useRef(null);\r\n\r\n    let showPasswordIcon;\r\n    let passwordType;\r\n\r\n    useEffect(() => {\r\n        emailElement.current.focus();\r\n        if (props.currentLocation.state){\r\n            console.log(props.currentLocation.state.detail)\r\n        }\r\n        \r\n    }, [emailElement])\r\n\r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: loadingData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: \"xMidYMid slice\"\r\n        }\r\n      };\r\n\r\n    const handleSubmit = async e => {\r\n        \r\n        e.preventDefault();\r\n        let response;\r\n        let json;\r\n\r\n        setLoading(true);\r\n\r\n        //Post email and password to back end and get authenticated\r\n        response = await fetch('/api/login', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email,\r\n                password\r\n            })\r\n        })\r\n\r\n        json = await response.json();\r\n\r\n\r\n        if (json.token){\r\n            localStorage.setItem('token', json.token);\r\n            response = await fetch('/api/user', {headers: { 'x-access-tokens': json.token}});\r\n            json = await response.json();\r\n            setLoading(false);\r\n            context.assignFName(json.firstName);\r\n            context.assignLName(json.lastName);\r\n            props.assignLogNotif([]);\r\n\r\n            if (props.currentLocation.state && props.currentLocation.state.detail === 'DIRECTED') {\r\n                history.goBack();\r\n            } else {\r\n                history.push('/');\r\n            }\r\n            \r\n        } else if (json.message === 'User is not verified'){\r\n            setLoading(false)\r\n            props.assignAuthEmail(email);\r\n            props.assignLogNotif(['Account not verified!', 'This account has not yet been verified. If you are the owner of this account and did not recieve a verification email, please click Resend to send another verification link to your email.', 'warning']);\r\n        } else if (json.message === 'A user with this email does not exist.') {\r\n            setLoading(false)\r\n            props.assignLogNotif(['Account not found!', 'A user with this email does not exist.', 'danger']);\r\n        } else if (json.message === 'Your email or password is incorrect') {\r\n            setLoading(false)\r\n            props.assignLogNotif(['Invalid Credentials!', 'Your email or password is incorrect.', 'danger']);\r\n        }\r\n        \r\n    }\r\n\r\n    if (showPassword) {\r\n        showPasswordIcon = (\r\n            <div className='hide-password' onClick={() => setShowPassword(false)}></div>\r\n        );\r\n\r\n        passwordType = 'text';\r\n    } else {\r\n        showPasswordIcon = (\r\n            <div className='show-password' onClick={() => setShowPassword(true)}></div>\r\n        );\r\n\r\n        passwordType = 'password';\r\n    }\r\n\r\n    //Password field should be secured and should not be openly updated in state\r\n\r\n    return (\r\n        <div className='login-container'>\r\n            <h1 className='welcome-message'>Welcome</h1>\r\n            <form className='login-form' onSubmit={handleSubmit}>\r\n                <input ref={emailElement} className='login-form-item login-input' type='text' placeholder='Email' onChange={e => setEmail(e.target.value)}/>\r\n                <div className='password-container'>\r\n                    <input className='password-item login-input' type={passwordType} placeholder='Password' onChange={e => setPassword(e.target.value)}/>\r\n                    {showPasswordIcon}\r\n                </div>\r\n                <button className='login-form-item login-button' type='submit' disabled={loading}>\r\n                    {!loading && 'Sign in'}\r\n                    {loading && <Lottie options={defaultOptions} height={75} width={75}></Lottie>}\r\n                </button>\r\n                \r\n            </form>\r\n            <h5 className='forgot-password'>Forgot your password?</h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, { useState, useEffect, useRef } from 'react';\r\nimport '../css/Register.css';\r\nimport Lottie from 'react-lottie';\r\nimport loadingData from '../lotties/loading';\r\n\r\nconst Register = (props) => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n\r\n    const [nameEmailPassword, setNameEmailPassword] = useState(0);\r\n\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n\r\n    const [submittedOnce, setSubmittedOnce] = useState(false);\r\n    const [submitted, setSubmitted] = useState(false);\r\n\r\n    const [firstNameError, setFirstNameError] = useState('');\r\n    const [lastNameError, setLastNameError] = useState('');\r\n    const [emailError, setEmailError] = useState('');\r\n    const [phoneNumberError, setPhoneNumberError] = useState('');\r\n    const [passwordError, setPasswordError] = useState('');\r\n\r\n    const [firstNameShake, setFirstNameShake] = useState('');\r\n    const [lastNameShake, setLastNameShake] = useState('');\r\n    const [emailShake, setEmailShake] = useState('');\r\n    const [phoneNumberShake, setPhoneNumberShake] = useState('');\r\n    const [passwordShake, setPasswordShake] = useState('');\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const firstNameElement = useRef(null);\r\n    const emailElement = useRef(null);\r\n    const passwordElement = useRef(null);\r\n\r\n\r\n    let regFormPage;\r\n    let passwordType;\r\n    let confirmPasswordType;\r\n    let showPasswordIcon;\r\n    let showConfirmPasswordIcon;\r\n    let showHiddenDiv;\r\n\r\n    let firstNameBorder = 'border-normal';\r\n    let lastNameBorder = 'border-normal';\r\n    let emailBorder = 'border-normal';\r\n    let phoneNumberBorder = 'border-normal';\r\n    let passwordBorder = 'border-normal';\r\n    \r\n    useEffect(() => {\r\n        if (nameEmailPassword === 0) {\r\n            firstNameElement.current.focus();\r\n        }\r\n        else if (nameEmailPassword === 1) {\r\n            emailElement.current.focus();\r\n        }\r\n        else {\r\n            passwordElement.current.focus();\r\n        }\r\n    }, [nameEmailPassword]);\r\n\r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: loadingData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: \"xMidYMid slice\"\r\n        }\r\n      };\r\n      \r\n    const handleNameNext = (e) => {\r\n        e.preventDefault();\r\n        setNameEmailPassword(1);\r\n        clearShake();\r\n    }\r\n\r\n    const handleEmailNext = (e) => {\r\n        e.preventDefault();\r\n        setNameEmailPassword(2);\r\n        clearShake();\r\n    }\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n\r\n        setLoading(true);\r\n        setSubmittedOnce(true);\r\n        errorCheckSubmit();\r\n\r\n        if (firstNameError || lastNameError || emailError || phoneNumberError || passwordError) {\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        const response = await fetch('/api/register', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                firstName,\r\n                lastName,\r\n                email,\r\n                healthCard: '',\r\n                phoneNumber,\r\n                password,\r\n                confirmPassword\r\n            })\r\n        })\r\n\r\n        const json = await response.json();\r\n\r\n        props.assignAuthEmail(email);\r\n        setLoading(false);\r\n\r\n        if (json.message === 'User Created') {\r\n            props.assignRegNotif(['Registration Successful!', `Thank you for registering ${firstName}, please verify your account by clicking the verification link sent to your email.`, 'success']);\r\n        }\r\n\r\n        else if (json.message === 'A user with this email already exists.') {\r\n            props.assignRegNotif(['Email already in use!',`A user with the email ${email} already exists. Please use another email.`, 'danger']);\r\n        }\r\n    }\r\n\r\n    const validateEmail = address => {\r\n        return /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(address);\r\n    }\r\n\r\n    const isNumber = phone => {\r\n        return /^\\d*$/.test(phone);\r\n    }\r\n\r\n    const clearShake = () => {\r\n        (passwordShake !== '') && setPasswordShake('');\r\n        (emailShake !== '') && setEmailShake('');\r\n        (phoneNumberShake !== '') && setPhoneNumberShake('');\r\n        (firstNameShake !== '') && setFirstNameShake('');\r\n        (lastNameShake !== '') && setLastNameShake('');\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n/////////////// FRONTEND ERROR-CHECKING ////////////////////\r\nconst errorCheckSubmit = () => {\r\n    //Check for Password and Confirm Password errors\r\n    if ((password === '')){\r\n        setPasswordError('A password is required');\r\n        setNameEmailPassword(2);\r\n        setPasswordShake('shake-error');\r\n    }\r\n\r\n    else if ((password.length < 8)) {\r\n        setPasswordError('The password must be at least 8 characters long');\r\n        setNameEmailPassword(2);\r\n        setPasswordShake('shake-error');\r\n    }\r\n\r\n    else if ((password !== confirmPassword)){\r\n        setPasswordError('The passwords do not match');\r\n        setNameEmailPassword(2);\r\n        setPasswordShake('shake-error');\r\n    }\r\n    else {\r\n        setPasswordError('');\r\n        setPasswordShake('');\r\n    }\r\n\r\n    \r\n    //Check for Email errors\r\n    if ((email === '')){\r\n        setEmailError('An email is required');\r\n        setNameEmailPassword(1);\r\n        setEmailShake('shake-error');\r\n    }\r\n    else if ((!validateEmail(email))) {\r\n        setEmailError('You have entered an invalid email');\r\n        setNameEmailPassword(1);\r\n        setEmailShake('shake-error');\r\n    }\r\n    else {\r\n        setEmailError('');\r\n        setEmailShake('');\r\n    }\r\n\r\n    //Check for Phone Number (optional) errors\r\n    if (!isNumber(phoneNumber)) {\r\n        setPhoneNumberError('The phone number may only contain numbers');\r\n        setNameEmailPassword(1);\r\n        setPhoneNumberShake('shake-error');\r\n    }\r\n    else {\r\n        setPhoneNumberError('');\r\n        setPhoneNumberShake('');\r\n    }\r\n\r\n    //Check for First Name errors\r\n    if ((firstName === '')){\r\n        setFirstNameError('A first name is required');\r\n        setNameEmailPassword(0);\r\n        setFirstNameShake('shake-error');\r\n    } \r\n    else {\r\n        setFirstNameError('');\r\n        setFirstNameShake('');\r\n    }\r\n\r\n    //Check for Last Name errors\r\n    if ((lastName === '')){\r\n        setLastNameError('A last name is required');\r\n        setNameEmailPassword(0);\r\n        setLastNameShake('shake-error');\r\n    }\r\n    else {\r\n        setLastNameError('');\r\n        setLastNameShake('');\r\n    }\r\n    \r\n    \r\n}\r\n\r\nconst errorCheckRender = () => {\r\n    //Check for Password and Confirm Password errors\r\n    if ((password === '')){\r\n        (passwordError !== 'A password is required') && setPasswordError('A password is required');\r\n    }\r\n\r\n    else if ((password.length < 8)) {\r\n        (passwordError !== 'The password must be at least 8 characters long') && setPasswordError('The password must be at least 8 characters long');\r\n    }\r\n\r\n    else if ((password !== confirmPassword)){\r\n        (passwordError !== 'The passwords do not match') && setPasswordError('The passwords do not match');\r\n    }\r\n    else {\r\n        (passwordError !== '') && setPasswordError('');\r\n    }\r\n\r\n    \r\n    //Check for Email errors\r\n    if ((email === '')){\r\n        (emailError !== 'An email is required') && setEmailError('An email is required');\r\n    }\r\n    else if ((!validateEmail(email))) {\r\n        (emailError !== 'You have entered an invalid email') && setEmailError('You have entered an invalid email');\r\n    }\r\n    else {\r\n        (emailError !== '') && setEmailError('');\r\n    }\r\n\r\n    //Check for Phone Number (optional) errors\r\n    if (!isNumber(phoneNumber)) {\r\n        (phoneNumberError !== 'The phone number may only contain numbers') && setPhoneNumberError('The phone number may only contain numbers');\r\n    }\r\n    else {\r\n        (phoneNumberError !== '') && setPhoneNumberError('');\r\n    }\r\n\r\n    //Check for First Name errors\r\n    if ((firstName === '')){\r\n        (firstNameError !== 'A first name is required') && setFirstNameError('A first name is required');\r\n    } \r\n    else {\r\n        (firstNameError !== '') && setFirstNameError('');\r\n    }\r\n\r\n    //Check for Last Name errors\r\n    if ((lastName === '')){\r\n        (lastNameError !== 'A last name is required') && setLastNameError('A last name is required');\r\n    }\r\n    else {\r\n        (lastNameError !== '') && setLastNameError('');\r\n    }\r\n}\r\n\r\nerrorCheckRender();\r\n\r\n//Decides whether the password is currently shown or not\r\nif (showPassword) {\r\n    showPasswordIcon = (\r\n        <div className={`hide-password ${passwordShake}`} onClick={() => setShowPassword(false)}></div>\r\n    );\r\n\r\n    passwordType = 'text';\r\n} else {\r\n    showPasswordIcon = (\r\n        <div className={`show-password ${passwordShake}`} onClick={() => setShowPassword(true)}></div>\r\n    );\r\n\r\n    passwordType = 'password';\r\n}\r\n\r\n //Decides whether the confirm password is currently shown or not\r\n if (showConfirmPassword) {\r\n    showConfirmPasswordIcon = (\r\n        <div className={`hide-password ${passwordShake}`} onClick={() => setShowConfirmPassword(false)}></div>\r\n    );\r\n\r\n    confirmPasswordType = 'text';\r\n} else {\r\n    showConfirmPasswordIcon = (\r\n        <div className={`show-password ${passwordShake}`} onClick={() => setShowConfirmPassword(true)}></div>\r\n    );\r\n\r\n    confirmPasswordType = 'password';\r\n}\r\n\r\n//Set error borders on inputs\r\nif (firstNameError) {\r\n    firstNameBorder = 'border-error';\r\n}\r\n\r\nif (lastNameError) {\r\n    lastNameBorder = 'border-error';\r\n}\r\n\r\nif (emailError) {\r\n    emailBorder = 'border-error';\r\n}\r\n\r\nif (phoneNumberError) {\r\n    phoneNumberBorder = 'border-error';\r\n}\r\n\r\nif (passwordError) {\r\n    passwordBorder = 'border-error';\r\n}\r\n\r\n    \r\n////////////////////////////////////////////////////////////\r\n    \r\n\r\n    if (nameEmailPassword === 0) {\r\n        regFormPage = (\r\n            <form className='register-form' onSubmit={handleNameNext}>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? firstNameError : null}</h5>\r\n                <input ref={firstNameElement} className={`register-form-item register-input ${(submittedOnce) ? firstNameBorder: 'border-normal'} ${firstNameShake}`} value={firstName} type='text' placeholder='First Name' onChange={e => setFirstName(e.target.value)}/>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? lastNameError : null}</h5>\r\n                <input className={`register-form-item register-input ${(submittedOnce) ? lastNameBorder: 'border-normal'} ${lastNameShake}`} value={lastName} type='text' placeholder='Last Name' onChange={e => setLastName(e.target.value)}/>\r\n                <div className='submission-buttons'>\r\n                    <button className='register-form-item register-button' type='submit'>Next</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    else if (nameEmailPassword === 1) {\r\n        regFormPage = (\r\n            <form className='register-form' onSubmit={handleEmailNext}>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? emailError : null}</h5>\r\n                <input ref={emailElement} className={`register-form-item register-input ${(submittedOnce) ? emailBorder: 'border-normal'} ${emailShake}`} value={email} type='text' placeholder='Email' onChange={e => setEmail(e.target.value)}/>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? phoneNumberError : null}</h5>\r\n                <input className={`register-form-item register-input ${(submittedOnce) ? phoneNumberBorder: 'border-normal'} ${phoneNumberShake}`} value={phoneNumber} type='text' placeholder='Phone Number' onChange={e => setPhoneNumber(e.target.value)}/>\r\n                <div></div>\r\n                <div className='submission-buttons'>\r\n                    <button className='register-form-item back-button' type='button' onClick={() => setNameEmailPassword(0)}>Back</button>\r\n                    <div className='register-form-item'></div>\r\n                    <button className='register-form-item register-button' type='submit'>Next</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    else {\r\n        regFormPage = (\r\n            <form className='register-form' onSubmit={handleSubmit}>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? passwordError : null}</h5>\r\n                <div className='password-container'>\r\n                    <input ref={passwordElement} className={`password-item register-input ${(submittedOnce) ? passwordBorder: 'border-normal'} ${passwordShake}`} type={passwordType} value={password} placeholder='Password' onChange={e => setPassword(e.target.value)}/>\r\n                    {showPasswordIcon}\r\n                </div>\r\n                <div className='password-container'>\r\n                    <input className={`password-item register-input ${(submittedOnce) ? passwordBorder: 'border-normal'} ${passwordShake}`} type={confirmPasswordType} value={confirmPassword} placeholder='Confirm Password' onChange={e => setConfirmPassword(e.target.value)}/>\r\n                    {showConfirmPasswordIcon}\r\n                </div>\r\n                {showHiddenDiv}\r\n                <div className='submission-buttons'>\r\n                    <button className='register-form-item back-button' type='button' onClick={() => setNameEmailPassword(1)}>Back</button>\r\n                    <div className='register-form-item'></div>\r\n                    <button className='register-form-item register-button' type='submit' disabled={loading}>\r\n                        {!loading && 'Sign up'}\r\n                        {loading && <Lottie options={defaultOptions} height={75} width={75}></Lottie>}\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n     //Password field should be secured and should not be openly updated in state\r\n\r\n    return (\r\n        <div className='register-container'>\r\n            <h1 className='welcome-message'>Create account</h1>\r\n            {regFormPage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n","import React, { useState, useEffect, useContext, useLayoutEffect } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport Login from './Login';\r\nimport Register from './Register';\r\nimport Lottie from 'react-lottie';\r\nimport { CSSTransition } from 'react-transition-group'; \r\nimport {Alert, Button} from 'react-bootstrap'\r\nimport loadingData from '../lotties/loading';\r\nimport Context from '../utils/context';\r\nimport '../css/Auth.css';\r\n\r\nconst Auth = (props) => {\r\n    const context = useContext(Context);\r\n    const location = useLocation();\r\n    \r\n    const [loginRegister, setLoginRegister] = useState(false);\r\n    const [regNotification, setRegNotification] = useState([]);\r\n    const [logNotification, setLogNotification] = useState([]);\r\n    const [regShow, setRegShow] = useState(false);\r\n    const [logShow, setLogShow] = useState(false);\r\n    const [authEmail, setAuthEmail] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const { token } = props.match.params;\r\n\r\n    let gradientDisplay;\r\n    let resizeTimer;\r\n    let regNotificationDisplay;\r\n    let logNotificationDisplay;\r\n\r\n    useLayoutEffect(() => {\r\n        context.assignShowNav(false);\r\n        if (token === 'register'){\r\n            setLoginRegister(true);\r\n        }\r\n        \r\n        else if (token === 'login') {\r\n            setLoginRegister(false);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async() => {\r\n        let response;\r\n        let json;\r\n\r\n        if (localStorage.getItem('token')) {\r\n            localStorage.removeItem('token');\r\n            context.assignFName('');\r\n            context.assignLName('');\r\n        }\r\n\r\n        if (token){\r\n            if (token !== 'register' && token !== 'login'){\r\n                response = await fetch(`/api/confirm_email/${token}`);\r\n                json = await response.json();\r\n    \r\n                if (json.message === 'token_expired') {\r\n                    setLogNotification(['Verification Token Expired!', 'Your verification token session has expired. Please press Resend to send another verification link to your email.', 'danger']);\r\n                    setLogShow(true);\r\n                }\r\n                else if (json.message === 'email_already_confirmed') {\r\n                    setLogNotification(['Account already verified!', 'You have already verified this account.', 'warning']);\r\n                    setLogShow(true);\r\n                }\r\n                else if (json.message === 'email_confirm_success') {\r\n                    setLogNotification(['Account verified successfully!', 'Thank you for verifying your account. You may now log in.', 'success']);\r\n                    setLogShow(true);\r\n                }\r\n            }\r\n        }\r\n\r\n    }, []);\r\n\r\n    window.addEventListener(\"resize\", () => {\r\n    document.body.classList.add(\"resize-animation-stopper\");\r\n    clearTimeout(resizeTimer);\r\n    resizeTimer = setTimeout(() => {\r\n        document.body.classList.remove(\"resize-animation-stopper\");\r\n    }, 400);\r\n    });\r\n\r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: loadingData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: \"xMidYMid slice\"\r\n        }\r\n      };\r\n\r\n    const assignAuthEmail = (email) => {\r\n        setAuthEmail(email);\r\n    }\r\n\r\n    const assignRegNotif = (regNotif) => {\r\n        setRegNotification(regNotif);\r\n    }\r\n\r\n    const assignLogNotif = (logNotif) => {\r\n        setLogNotification(logNotif);\r\n    }\r\n\r\n    const regNotifClose = () => {\r\n        setRegShow(true);\r\n        setRegNotification([]);\r\n    }\r\n\r\n    const logNotifClose = () => {\r\n        setLogShow(true);\r\n        setLogNotification([]);\r\n    }\r\n\r\n    const handleResendToken = async() => {\r\n        let response;\r\n        let json;\r\n\r\n        setLoading(true);\r\n\r\n        response = await fetch('/api/resendToken', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email: authEmail\r\n            })\r\n        })\r\n\r\n        json = await response.json();\r\n\r\n        setLoading(false);\r\n\r\n\r\n    }\r\n\r\n    //Check for which screen the user is currently on (login or register)\r\n    if (loginRegister) {\r\n            gradientDisplay = ( <div className=\"gradient-display-background gradient-display-background-register\">\r\n                                    <div className='gradient-display gradient-display-register-rtrue'>\r\n                                        <h1 className='gradient-display-text'>Already have an account?</h1>\r\n                                        <button  onClick={() => {\r\n                                            setRegShow(false);\r\n                                            setRegNotification([]);\r\n                                            setLoginRegister(false)}} className='gradient-display-button gradient-display-button-red'>Login</button>\r\n                                    </div>\r\n                                    <div className='gradient-display gradient-display-register-bfalse'></div>\r\n                                </div>);\r\n    }\r\n\r\n    else {\r\n            gradientDisplay = ( <div className=\"gradient-display-background gradient-display-background-login\">\r\n                                    <div className='gradient-display gradient-display-login-rfalse'></div>\r\n                                    <div className='gradient-display gradient-display-login-btrue'>\r\n                                        <h1 className='gradient-display-text'>Don't have an account?</h1>\r\n                                        <button onClick={() => {\r\n                                            setLogShow(false);\r\n                                            setLogNotification([]);\r\n                                            setLoginRegister(true)}} className='gradient-display-button gradient-display-button-blue'>Register</button>\r\n                                    </div>\r\n                                </div>);\r\n    }\r\n\r\n    //Show any registration notifications\r\n    if (regNotification.length) {\r\n        regNotificationDisplay = (  <Alert className='alert-align auth-index' variant={regNotification[2]} onClose={() => regNotifClose()} dismissible>\r\n                                        <Alert.Heading>{regNotification[0]}</Alert.Heading>\r\n                                        <p>{regNotification[1]}</p>\r\n                                        {(regNotification[0] === 'Registration Successful!') && (<div className=\"d-flex justify-content-end\">\r\n                                            <Button onClick={() => handleResendToken()} variant=\"outline-success\" disabled={loading}>\r\n                                                {!loading && 'Resend'}\r\n                                                {loading && <Lottie options={defaultOptions} height={35} width={35}></Lottie>}\r\n                                            </Button>\r\n                                        </div>)}\r\n                                    </Alert>);\r\n        (regShow !== true) && setRegShow(true);\r\n    }\r\n\r\n    if (logNotification.length) {\r\n        logNotificationDisplay  = ( <Alert className='alert-align' variant={logNotification[2]} onClose={() => logNotifClose()} dismissible>\r\n                                        <Alert.Heading>{logNotification[0]}</Alert.Heading>\r\n                                        <p>{logNotification[1]}</p>\r\n                                        {(logNotification[0] === 'Account not verified!') && (<div className=\"d-flex justify-content-end\">\r\n                                            <Button onClick={() => handleResendToken()} variant=\"outline-warning\" disabled={loading}>\r\n                                                {!loading && 'Resend'}\r\n                                                {loading && <Lottie options={defaultOptions} height={35} width={35}></Lottie>}\r\n                                            </Button>\r\n                                        </div>)}\r\n                                    </Alert>);\r\n        (logShow !== true) && setLogShow(true);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"auth-container\">\r\n            <Link className={`auth-logo ${(loginRegister) ? 'auth-logo-register' : 'auth-logo-login'}`} to='/'>Diabetes Doctor</Link>\r\n            {gradientDisplay}\r\n\r\n            <div className='fill'>\r\n                \r\n                \r\n                <CSSTransition\r\n                    in={loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"reg-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <div className='auth-notification-container'>\r\n                        {regShow && regNotificationDisplay}\r\n                    </div>\r\n                </CSSTransition>\r\n                \r\n                <CSSTransition\r\n                    in={loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"reg-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <Register assignRegNotif={(regNotif) => assignRegNotif(regNotif)}\r\n                              assignAuthEmail={(email) => assignAuthEmail(email)}/>\r\n                </CSSTransition>\r\n            </div>\r\n            <div className='fill'>\r\n                \r\n                <CSSTransition\r\n                    in={!loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"login-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <div className='auth-notification-container'>\r\n                        {logShow && logNotificationDisplay}\r\n                    </div>\r\n                </CSSTransition>\r\n                <CSSTransition\r\n                    in={!loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"login-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <Login assignLogNotif={(logNotif) => assignLogNotif(logNotif)}\r\n                           assignAuthEmail={(email) => assignAuthEmail(email)}\r\n                           currentLocation={location} />\r\n                </CSSTransition>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth;\r\n","import React, { useState, Fragment, useContext, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\r\nimport Wave from 'react-wavify';\r\nimport '../css/Navigation.css';\r\nimport Context from '../utils/context';\r\n\r\nconst Navigation = () => {\r\n    const context = useContext(Context);\r\n    const [navbarColor, setNavbarColor] = useState('Home');\r\n    const [rightNav, setRightNav] = useState();\r\n    const [sign, setSign] = useState(false);\r\n\r\n    useEffect(async() => {\r\n        if (localStorage.getItem('token')) {\r\n            let result;\r\n    \r\n            if (context.stateFName === '' && context.stateLName === '') {\r\n                result = await getUserInfo();\r\n            } else{\r\n                result = [context.stateFName, context.stateLName];\r\n            }\r\n    \r\n            if (result.length > 0) {\r\n                setRightNavToWelcome(result);\r\n            } else {\r\n                console.log('working')\r\n                setRightNavToLoginSignup();\r\n            }\r\n        } else {\r\n            setRightNavToLoginSignup();\r\n        }\r\n    }, [navbarColor, sign]);\r\n\r\n    const getUserInfo = async () => {\r\n        let response = await fetch('/api/user', {headers: { 'x-access-tokens': localStorage.getItem('token')}});\r\n        let json = await response.json();\r\n        if (json.message === 'Token is invalid' || json.message === 'Token is missing') {\r\n            console.log(json.message);\r\n            return [];\r\n        } else {\r\n            console.log(json.firstName)\r\n            console.log(json.lastName)\r\n            context.assignFName(json.firstName);\r\n            context.assignLName(json.lastName);\r\n            return [json.firstName, json.lastName];\r\n        }\r\n    }\r\n    const signoutUser = () => {\r\n        localStorage.removeItem('token');\r\n        context.assignFName('');\r\n        context.assignLName('');\r\n        setSign(!sign);\r\n    }\r\n\r\n    const setRightNavToLoginSignup = () => {\r\n        setRightNav(<Fragment>\r\n            <Nav.Link>\r\n                <Link to=\"/auth/register\" onClick={() => setNavbarColor('Home')} className=\"navbar-item-button-c\">\r\n                    <button className='navbar-signup-c'>Sign up</button>\r\n                </Link>\r\n            </Nav.Link>\r\n            <Nav.Link>\r\n                <Link to={{\r\n                            pathname: '/auth/login',\r\n                            state: { detail: 'DIRECTED' }\r\n                        }} onClick={() => setNavbarColor('Home')} className=\"navbar-item-button-c\">\r\n                    <button className='navbar-signin-c navbar-signin-colour'>Sign in</button>\r\n                </Link>\r\n            </Nav.Link>\r\n        </Fragment>);\r\n    }\r\n\r\n    const setRightNavToWelcome = (result) => {\r\n        setRightNav(<Fragment>\r\n            <NavDropdown alignRight title={`Welcome, ${result[0]} ${result[1]}`} id=\"collasible-nav-dropdown\" className='navbar-profile-dropdown'>\r\n                <NavDropdown.Item onClick={() => signoutUser()}>\r\n                    Sign out\r\n                </NavDropdown.Item>\r\n            </NavDropdown>\r\n        </Fragment>);\r\n    }\r\n\r\n    return (\r\n        <div className='nav-inner'>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" className={`${(navbarColor === 'Predictor') ? 'navbar-b' : 'navbar-r'}`}>\r\n                <Navbar.Brand>\r\n                    <Link to='/' onClick={() => setNavbarColor('Home')} className='navbar-item-c navbar-item-width-height navbar-title'>\r\n                        Diabetes Doctor\r\n                    </Link>\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className='m-auto navbar-item-font'>\r\n                        <Nav.Link>\r\n                            <Link to='/predict' onClick={() => setNavbarColor('Predictor')} className={`navbar-item-c navbar-item-width-height ${(navbarColor === 'Predictor') ? 'navbar-selected' : 'navbar-item-normal'}`}>\r\n                                Predictor\r\n                            </Link>\r\n                        </Nav.Link>\r\n                        <Nav.Link>\r\n                            <Link to='/track' onClick={() => setNavbarColor('Tracker')} className={`navbar-item-c navbar-item-width-height ${(navbarColor === 'Tracker') ? 'navbar-selected' : 'navbar-item-normal'}`}>\r\n                                Tracker\r\n                            </Link>\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                    <Nav>\r\n                        {rightNav}\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n                <Wave fill='#fff'\r\n                paused={false}\r\n                className='navbar-wave navbar-wave-1'\r\n                options={{\r\n                height: 15,\r\n                amplitude: 20,\r\n                speed: 0.15,\r\n                points: 4\r\n                }}\r\n            />\r\n\r\n            <Wave fill='#f6f6f6'\r\n                paused={false}\r\n                className='navbar-wave navbar-wave-2'\r\n                options={{\r\n                height: 20,\r\n                amplitude: 25,\r\n                speed: 0.15,\r\n                points: 3\r\n                }}\r\n            />\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\nexport default Navigation","import React, {useState, useEffect} from 'react';\r\nimport MaterialTable from 'material-table';\r\n//import '../css/TrackerTable.css';\r\n\r\nconst TrackerTable = () => {\r\n  const [columns, setColumns] = useState([\r\n    //{ title: 'ID', field: 'data_id', hidden:true },\r\n    { title: 'Daily Glucose', field: 'dailyGlucose', type: 'numeric' },\r\n    { title: 'Hours', field: 'hours', type: 'numeric'},\r\n    { title: 'Weight', field: 'weight', type: 'numeric' },\r\n    { title: 'Height', field: 'height', type: 'numeric' },\r\n    { title: 'Date & Time', field: 'dateTested', type: 'numeric'}\r\n  ]);\r\n\r\nconst [data, setData] = useState([]);\r\n\r\nuseEffect(async () => {\r\n    if (localStorage.getItem('token')){\r\n    \r\n        const response = await fetch('/api/trackDataAll', {\r\n            headers: {\r\n            'x-access-tokens': localStorage.getItem('token')\r\n            }\r\n        });\r\n\r\n        const json = await response.json();\r\n\r\n        setData(json.userData);\r\n\r\n        console.log('updated Tracker Table')\r\n    }\r\n}, []);\r\n\r\nconst deleteTrack = async (data) => {\r\n  const response = await fetch(`/api/predictData/${data.data_id}`,\r\n  {\r\n    method: 'DELETE',\r\n    headers: {\r\n              'x-access-tokens': localStorage.getItem('token')\r\n            }\r\n  })\r\n\r\n  const json = await response.json();\r\n              \r\n  console.log(json);\r\n}\r\n\r\nreturn (\r\n  <MaterialTable\r\n    title=\"Tracker\"\r\n    columns={columns}\r\n    data={data}\r\n    editable={{\r\n      onRowAdd: newData =>\r\n        new Promise((resolve, reject) => {\r\n          setTimeout(() => {\r\n            setData([...data, newData]);\r\n                \r\n            resolve();\r\n          }, 1000)\r\n        }),\r\n      onRowUpdate: (newData, oldData) =>\r\n        new Promise((resolve, reject) => {\r\n          setTimeout(() => {\r\n            const dataUpdate = [...data];\r\n            const index = oldData.tableData.id;\r\n            dataUpdate[index] = newData;\r\n            setData([...dataUpdate]);\r\n  \r\n            resolve();\r\n          }, 1000)\r\n        }),\r\n      onRowDelete: oldData =>\r\n        new Promise((resolve, reject) => {\r\n          setTimeout(() => {\r\n            if (localStorage.getItem('token')){\r\n\r\n              //deleteTrack(oldData);\r\n\r\n              const dataDelete = [...data];\r\n              const index = oldData.tableData.id;\r\n              dataDelete.splice(index, 1);\r\n              setData([...dataDelete]);\r\n            }\r\n            resolve()\r\n          }, 1000)\r\n        }),\r\n    }}\r\n    options={{\r\n        rowStyle: rowData => ({\r\n          backgroundColor: (rowData.tableData.id % 2 === 0) ? '#f6f6f6' : '#e6e6e6'\r\n        }),\r\n        exportButton:true,\r\n        pageSize: 10\r\n      }}\r\n  />\r\n)\r\n  \r\n    \r\n  }\r\n\r\n  export default TrackerTable;\r\n\r\n  ","import React, { useLayoutEffect, useContext, Fragment } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport Context from '../utils/context';\r\nimport TrackerTable from './TrackerTable';\r\nimport Wave from 'react-wavify';\r\nimport '../css/Tracker.css';\r\n\r\nconst Tracker = () => {\r\n    \r\n    let history = useHistory();\r\n    const context = useContext(Context);\r\n\r\n    useLayoutEffect(() => {\r\n        context.assignShowNav(true);\r\n    }, []);\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className='tracker-background-container'></div>\r\n            <div className='tracker-page-main-container'>\r\n                <div className='tracker-main-container'>\r\n                    <TrackerTable />       \r\n                </div>\r\n                <div className='tracker-hist-main-container'>\r\n                    <Wave fill='#fff'\r\n                        paused={false}\r\n                        className='tracker-wave tracker-wave-1'\r\n                        options={{\r\n                        height: 15,\r\n                        amplitude: 20,\r\n                        speed: 0.15,\r\n                        points: 4\r\n                        }}\r\n                    />\r\n\r\n                    <Wave fill='#f6f6f6'\r\n                        paused={false}\r\n                        className='tracker-wave tracker-wave-2'\r\n                        options={{\r\n                        height: 20,\r\n                        amplitude: 25,\r\n                        speed: 0.15,\r\n                        points: 3\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default Tracker; \r\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Context from './utils/context';\nimport Home from './components/Home';\nimport Predictor from './components/Predictor';\nimport Result from './components/Result';\nimport Auth from './components/Auth';\nimport Navigation from './components/Navigation';\nimport Tracker from './components/Tracker';\n\nfunction App() {\n  const [prediction, setPrediction] = useState(false);\n  const [showNav, setShowNav] = useState(true);\n  const [token, setToken] = useState();\n  const [fName, setFName] = useState('');\n  const [lName, setLName] = useState('');\n\n  const assignPrediction = (pred) => {\n    setPrediction(pred);\n  }\n\n  const assignToken = (token) => {\n    setToken(token);\n  }\n  \n  const assignShowNav = (show) => {\n    setShowNav(show);\n  }\n\n  const assignFName = (firstname) => {\n    setFName(firstname);\n  }\n\n  const assignLName = (lastname) => {\n    setLName(lastname);\n  }\n  \n  return (\n    <Context.Provider value = {{\n      statePrediction: prediction,\n      assignPredictionFunction: (pred) => assignPrediction(pred),\n      stateToken: token,\n      assignTokenFunction: (token) => assignToken(token),\n      stateNav: showNav,\n      assignShowNav: (show) => assignShowNav(show),\n      stateFName: fName,\n      assignFName: (firstname) => assignFName(firstname),\n      stateLName: lName,\n      assignLName: (lastname) => assignLName(lastname)\n    }}>\n      <Router>\n        <div className=\"App\">\n          {(showNav) && <Navigation />}\n          <Switch>\n            <Route exact path='/' component={Home}/>\n            <Route exact path='/predict' component={Predictor}/>\n            <Route exact path='/track' component={Tracker}/>\n            <Route exact path='/results' component={Result}/>\n            <Route exact path='/auth/:token?' component={Auth}/>\n          </Switch>\n        </div>\n      </Router>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}