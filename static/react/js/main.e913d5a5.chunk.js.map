{"version":3,"sources":["utils/context.js","components/Home.js","components/PredictorForm.js","components/Result.js","components/Login.js","components/Register.js","components/Auth.js","components/Navigation.js","components/Tracker.js","App.js","index.js"],"names":["Context","createContext","Home","context","useContext","useLayoutEffect","assignShowNav","PredictorForm","history","useHistory","useState","pregnancies","setPregnancies","glucose","setGlucose","bloodpressure","setBloodpressure","skinthickness","setSkinthickness","insulin","setInsulin","bmi","setBmi","dpf","setDpf","age","setAge","handleSubmit","e","a","preventDefault","fetch","method","headers","body","JSON","stringify","response","json","assignPredictionFunction","push","className","onSubmit","type","placeholder","onChange","target","value","fill","paused","options","height","amplitude","speed","points","Result","result","statePrediction","to","Login","props","showPasswordIcon","passwordType","email","setEmail","password","setPassword","showPassword","setShowPassword","loading","setLoading","emailElement","useRef","useEffect","current","focus","defaultOptions","loop","autoplay","animationData","loadingData","rendererSettings","preserveAspectRatio","token","localStorage","setItem","assignFName","firstName","assignLName","lastName","assignLogNotif","message","assignAuthEmail","onClick","ref","disabled","width","Register","regFormPage","confirmPasswordType","showConfirmPasswordIcon","setFirstName","setLastName","confirmPassword","setConfirmPassword","phoneNumber","setPhoneNumber","nameEmailPassword","setNameEmailPassword","showConfirmPassword","setShowConfirmPassword","submittedOnce","setSubmittedOnce","firstNameError","setFirstNameError","lastNameError","setLastNameError","emailError","setEmailError","phoneNumberError","setPhoneNumberError","passwordError","setPasswordError","firstNameShake","setFirstNameShake","lastNameShake","setLastNameShake","emailShake","setEmailShake","phoneNumberShake","setPhoneNumberShake","passwordShake","setPasswordShake","firstNameElement","passwordElement","firstNameBorder","lastNameBorder","emailBorder","phoneNumberBorder","passwordBorder","errorCheckSubmit","healthCard","assignRegNotif","validateEmail","address","test","isNumber","phone","clearShake","length","showHiddenDiv","Auth","gradientDisplay","resizeTimer","regNotificationDisplay","logNotificationDisplay","loginRegister","setLoginRegister","regNotification","setRegNotification","logNotification","setLogNotification","regShow","setRegShow","logShow","setLogShow","authEmail","setAuthEmail","match","params","getItem","removeItem","window","addEventListener","document","classList","add","clearTimeout","setTimeout","remove","handleResendToken","Alert","variant","onClose","dismissible","Heading","Button","CSSTransition","in","timeout","classNames","unmountOnExit","regNotif","logNotif","Navigation","rightNav","navbarColor","setNavbarColor","getUserInfo","stateFName","stateLName","NavDropdown","alignRight","title","id","Item","Nav","Link","Navbar","collapseOnSelect","expand","bg","Brand","Toggle","aria-controls","Collapse","Tracker","App","prediction","setPrediction","showNav","setShowNav","setToken","fName","setFName","lName","setLName","Provider","pred","assignPrediction","stateToken","assignTokenFunction","assignToken","stateNav","show","firstname","lastname","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"js/main.e913d5a5.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst Context = createContext();\r\n\r\nexport default Context;\r\n","import React, { useLayoutEffect, useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport Context from '../utils/context';\r\n\r\nconst Home = () => {\r\n    const context = useContext(Context);\r\n\r\n    useLayoutEffect(() => {\r\n        context.assignShowNav(true);\r\n    }, []);\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Home</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useContext, useLayoutEffect, Fragment } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport Wave from 'react-wavify';\r\nimport Context from '../utils/context';\r\nimport '../css/Predictor.css';\r\n\r\nconst PredictorForm = () => {\r\n    //Values that give a prediction outcome of True (Have Diabetes) for\r\n    //the Random Forest Classification model:\r\n    \r\n    //const testData = {\r\n    //    pregnancies: 1,\r\n    //    glucose: 117,\r\n    //    bloodpressure: 88,\r\n    //    skinthickness: 24,\r\n    //    insulin: 145,\r\n    //    bmi: 34.5,\r\n    //    dpf: 0.403,\r\n    //    age: 40\r\n    //}\r\n    \r\n    let history = useHistory();\r\n    const context = useContext(Context);\r\n\r\n    const [pregnancies, setPregnancies] = useState(0);\r\n    const [glucose, setGlucose] = useState(0);\r\n    const [bloodpressure, setBloodpressure] = useState(0);\r\n    const [skinthickness, setSkinthickness] = useState(0);\r\n    const [insulin, setInsulin] = useState(0);\r\n    const [bmi, setBmi] = useState(0);\r\n    const [dpf, setDpf] = useState(0);\r\n    const [age, setAge] = useState(0);\r\n\r\n    useLayoutEffect(() => {\r\n        context.assignShowNav(true);\r\n    });\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n            const response = await fetch('/api/predict', {\r\n                method: 'POST',\r\n                headers: {\r\n                'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    pregnancies,\r\n                    glucose,\r\n                    bloodpressure,\r\n                    skinthickness,\r\n                    insulin,\r\n                    bmi,\r\n                    dpf,\r\n                    age\r\n                })\r\n            })\r\n\r\n            const json = await response.json();\r\n            context.assignPredictionFunction(json[0])\r\n            history.push('/results')\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className='predict-background-container'></div>\r\n            <div className='predict-page-main-container'>\r\n                <div className='predict-main-container'>\r\n                    <div className='predict-inner-container'>\r\n                            <h1 className='predict-title'>Do you have <span className='predict-title-diabetes'>diabetes?</span></h1>\r\n                            \r\n                            <form onSubmit={handleSubmit} className=\"predict-form\">\r\n                                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Pregnancies\" onChange={e => setPregnancies(e.target.value)}/>\r\n                                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Glucose\" onChange={e => setGlucose(e.target.value)}/>\r\n                                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Bloodpressure\" onChange={e => setBloodpressure(e.target.value)}/>\r\n                                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Skinthickness\" onChange={e => setSkinthickness(e.target.value)}/>\r\n                                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Insulin\" onChange={e => setInsulin(e.target.value)}/>\r\n                                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Bmi\" onChange={e => setBmi(e.target.value)}/>\r\n                                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Dpf\" onChange={e => setDpf(e.target.value)}/>\r\n                                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Age\" onChange={e => setAge(e.target.value)}/>\r\n                                <button className=\"predict-form-item predict-button\" type=\"submit\">Predict</button>\r\n                            </form>\r\n                    </div>                \r\n                </div>\r\n                <div className='prediction-hist-main-container'>\r\n                    <Wave fill='#fff'\r\n                        paused={false}\r\n                        className='predictor-wave predictor-wave-1'\r\n                        options={{\r\n                        height: 15,\r\n                        amplitude: 20,\r\n                        speed: 0.15,\r\n                        points: 4\r\n                        }}\r\n                    />\r\n\r\n                    <Wave fill='#f6f6f6'\r\n                        paused={false}\r\n                        className='predictor-wave predictor-wave-2'\r\n                        options={{\r\n                        height: 20,\r\n                        amplitude: 25,\r\n                        speed: 0.15,\r\n                        points: 3\r\n                        }}\r\n                    />\r\n\r\n                    <h1 className='predict-title'>Prediction History</h1>\r\n\r\n                    <div className='prediction-hist-inner-container'></div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default PredictorForm;","import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Context from '../utils/context';\r\n\r\nconst Result = () => {\r\n    const context = useContext(Context);\r\n    let result;\r\n\r\n    if (context.statePrediction) {\r\n        result = <h2 className='result-bad'>Oops! You have DIABETES.</h2>;\r\n    }\r\n    else {\r\n        result = <h2 className='result-good'>Great! You DON'T have diabetes.</h2>;\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Results</h1>\r\n            {result}\r\n            <Link to='/predict'>Go to Predictor</Link>\r\n            <br />\r\n            <Link to='/'>Go home</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result;\r\n","import React, { useState, useContext, useEffect, useRef } from 'react';\r\nimport '../css/Login.css';\r\nimport Context from '../utils/context'\r\nimport Lottie from 'react-lottie';\r\nimport loadingData from '../lotties/loading';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Login = (props) => {\r\n    const context = useContext(Context);\r\n    let history = useHistory();\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const emailElement = useRef(null);\r\n\r\n    let showPasswordIcon;\r\n    let passwordType;\r\n\r\n    useEffect(() => {\r\n        emailElement.current.focus();\r\n    }, [emailElement])\r\n\r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: loadingData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: \"xMidYMid slice\"\r\n        }\r\n      };\r\n\r\n    const handleSubmit = async e => {\r\n        \r\n        e.preventDefault();\r\n        let response;\r\n        let json;\r\n\r\n        setLoading(true);\r\n\r\n        //Post email and password to back end and get authenticated\r\n        response = await fetch('/api/login', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email,\r\n                password\r\n            })\r\n        })\r\n\r\n        json = await response.json();\r\n\r\n\r\n        if (json.token){\r\n            localStorage.setItem('token', json.token);\r\n            response = await fetch('/api/user', {headers: { 'x-access-tokens': json.token}});\r\n            json = await response.json();\r\n            setLoading(false);\r\n            context.assignFName(json.firstName);\r\n            context.assignLName(json.lastName);\r\n            props.assignLogNotif([]);\r\n            history.push('/');\r\n        } else if (json.message === 'User is not verified'){\r\n            setLoading(false)\r\n            props.assignAuthEmail(email);\r\n            props.assignLogNotif(['Account not verified!', 'This account has not yet been verified. If you are the owner of this account and did not recieve a verification email, please click Resend to send another verification link to your email.', 'warning']);\r\n        } else if (json.message === 'A user with this email does not exist.') {\r\n            setLoading(false)\r\n            props.assignLogNotif(['Account not found!', 'A user with this email does not exist.', 'danger']);\r\n        } else if (json.message === 'Your email or password is incorrect') {\r\n            setLoading(false)\r\n            props.assignLogNotif(['Invalid Credentials!', 'Your email or password is incorrect.', 'danger']);\r\n        }\r\n        \r\n    }\r\n\r\n    if (showPassword) {\r\n        showPasswordIcon = (\r\n            <div className='hide-password' onClick={() => setShowPassword(false)}></div>\r\n        );\r\n\r\n        passwordType = 'text';\r\n    } else {\r\n        showPasswordIcon = (\r\n            <div className='show-password' onClick={() => setShowPassword(true)}></div>\r\n        );\r\n\r\n        passwordType = 'password';\r\n    }\r\n\r\n    //Password field should be secured and should not be openly updated in state\r\n\r\n    return (\r\n        <div className='login-container'>\r\n            <h1 className='welcome-message'>Welcome</h1>\r\n            <form className='login-form' onSubmit={handleSubmit}>\r\n                <input ref={emailElement} className='login-form-item login-input' type='text' placeholder='Email' onChange={e => setEmail(e.target.value)}/>\r\n                <div className='password-container'>\r\n                    <input className='password-item login-input' type={passwordType} placeholder='Password' onChange={e => setPassword(e.target.value)}/>\r\n                    {showPasswordIcon}\r\n                </div>\r\n                <button className='login-form-item login-button' type='submit' disabled={loading}>\r\n                    {!loading && 'Sign in'}\r\n                    {loading && <Lottie options={defaultOptions} height={75} width={75}></Lottie>}\r\n                </button>\r\n                \r\n            </form>\r\n            <h5 className='forgot-password'>Forgot your password?</h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, { useState, useEffect, useRef } from 'react';\r\nimport '../css/Register.css';\r\nimport Lottie from 'react-lottie';\r\nimport loadingData from '../lotties/loading';\r\n\r\nconst Register = (props) => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n\r\n    const [nameEmailPassword, setNameEmailPassword] = useState(0);\r\n\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n\r\n    const [submittedOnce, setSubmittedOnce] = useState(false);\r\n    const [submitted, setSubmitted] = useState(false);\r\n\r\n    const [firstNameError, setFirstNameError] = useState('');\r\n    const [lastNameError, setLastNameError] = useState('');\r\n    const [emailError, setEmailError] = useState('');\r\n    const [phoneNumberError, setPhoneNumberError] = useState('');\r\n    const [passwordError, setPasswordError] = useState('');\r\n\r\n    const [firstNameShake, setFirstNameShake] = useState('');\r\n    const [lastNameShake, setLastNameShake] = useState('');\r\n    const [emailShake, setEmailShake] = useState('');\r\n    const [phoneNumberShake, setPhoneNumberShake] = useState('');\r\n    const [passwordShake, setPasswordShake] = useState('');\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const firstNameElement = useRef(null);\r\n    const emailElement = useRef(null);\r\n    const passwordElement = useRef(null);\r\n\r\n\r\n    let regFormPage;\r\n    let passwordType;\r\n    let confirmPasswordType;\r\n    let showPasswordIcon;\r\n    let showConfirmPasswordIcon;\r\n    let showHiddenDiv;\r\n\r\n    let firstNameBorder = 'border-normal';\r\n    let lastNameBorder = 'border-normal';\r\n    let emailBorder = 'border-normal';\r\n    let phoneNumberBorder = 'border-normal';\r\n    let passwordBorder = 'border-normal';\r\n    \r\n    useEffect(() => {\r\n        if (nameEmailPassword === 0) {\r\n            firstNameElement.current.focus();\r\n        }\r\n        else if (nameEmailPassword === 1) {\r\n            emailElement.current.focus();\r\n        }\r\n        else {\r\n            passwordElement.current.focus();\r\n        }\r\n    }, [nameEmailPassword]);\r\n\r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: loadingData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: \"xMidYMid slice\"\r\n        }\r\n      };\r\n      \r\n    const handleNameNext = (e) => {\r\n        e.preventDefault();\r\n        setNameEmailPassword(1);\r\n        clearShake();\r\n    }\r\n\r\n    const handleEmailNext = (e) => {\r\n        e.preventDefault();\r\n        setNameEmailPassword(2);\r\n        clearShake();\r\n    }\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n\r\n        setLoading(true);\r\n        setSubmittedOnce(true);\r\n        errorCheckSubmit();\r\n\r\n        if (firstNameError || lastNameError || emailError || phoneNumberError || passwordError) {\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        const response = await fetch('/api/register', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                firstName,\r\n                lastName,\r\n                email,\r\n                healthCard: '',\r\n                phoneNumber,\r\n                password,\r\n                confirmPassword\r\n            })\r\n        })\r\n\r\n        const json = await response.json();\r\n\r\n        props.assignAuthEmail(email);\r\n        setLoading(false);\r\n\r\n        if (json.message === 'User Created') {\r\n            props.assignRegNotif(['Registration Successful!', `Thank you for registering ${firstName}, please verify your account by clicking the verification link sent to your email.`, 'success']);\r\n        }\r\n\r\n        else if (json.message === 'A user with this email already exists.') {\r\n            props.assignRegNotif(['Email already in use!',`A user with the email ${email} already exists. Please use another email.`, 'danger']);\r\n        }\r\n    }\r\n\r\n    const validateEmail = address => {\r\n        return /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(address);\r\n    }\r\n\r\n    const isNumber = phone => {\r\n        return /^\\d*$/.test(phone);\r\n    }\r\n\r\n    const clearShake = () => {\r\n        (passwordShake !== '') && setPasswordShake('');\r\n        (emailShake !== '') && setEmailShake('');\r\n        (phoneNumberShake !== '') && setPhoneNumberShake('');\r\n        (firstNameShake !== '') && setFirstNameShake('');\r\n        (lastNameShake !== '') && setLastNameShake('');\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n/////////////// FRONTEND ERROR-CHECKING ////////////////////\r\nconst errorCheckSubmit = () => {\r\n    //Check for Password and Confirm Password errors\r\n    if ((password === '')){\r\n        setPasswordError('A password is required');\r\n        setNameEmailPassword(2);\r\n        setPasswordShake('shake-error');\r\n    }\r\n\r\n    else if ((password.length < 8)) {\r\n        setPasswordError('The password must be at least 8 characters long');\r\n        setNameEmailPassword(2);\r\n        setPasswordShake('shake-error');\r\n    }\r\n\r\n    else if ((password !== confirmPassword)){\r\n        setPasswordError('The passwords do not match');\r\n        setNameEmailPassword(2);\r\n        setPasswordShake('shake-error');\r\n    }\r\n    else {\r\n        setPasswordError('');\r\n        setPasswordShake('');\r\n    }\r\n\r\n    \r\n    //Check for Email errors\r\n    if ((email === '')){\r\n        setEmailError('An email is required');\r\n        setNameEmailPassword(1);\r\n        setEmailShake('shake-error');\r\n    }\r\n    else if ((!validateEmail(email))) {\r\n        setEmailError('You have entered an invalid email');\r\n        setNameEmailPassword(1);\r\n        setEmailShake('shake-error');\r\n    }\r\n    else {\r\n        setEmailError('');\r\n        setEmailShake('');\r\n    }\r\n\r\n    //Check for Phone Number (optional) errors\r\n    if (!isNumber(phoneNumber)) {\r\n        setPhoneNumberError('The phone number may only contain numbers');\r\n        setNameEmailPassword(1);\r\n        setPhoneNumberShake('shake-error');\r\n    }\r\n    else {\r\n        setPhoneNumberError('');\r\n        setPhoneNumberShake('');\r\n    }\r\n\r\n    //Check for First Name errors\r\n    if ((firstName === '')){\r\n        setFirstNameError('A first name is required');\r\n        setNameEmailPassword(0);\r\n        setFirstNameShake('shake-error');\r\n    } \r\n    else {\r\n        setFirstNameError('');\r\n        setFirstNameShake('');\r\n    }\r\n\r\n    //Check for Last Name errors\r\n    if ((lastName === '')){\r\n        setLastNameError('A last name is required');\r\n        setNameEmailPassword(0);\r\n        setLastNameShake('shake-error');\r\n    }\r\n    else {\r\n        setLastNameError('');\r\n        setLastNameShake('');\r\n    }\r\n    \r\n    \r\n}\r\n\r\nconst errorCheckRender = () => {\r\n    //Check for Password and Confirm Password errors\r\n    if ((password === '')){\r\n        (passwordError !== 'A password is required') && setPasswordError('A password is required');\r\n    }\r\n\r\n    else if ((password.length < 8)) {\r\n        (passwordError !== 'The password must be at least 8 characters long') && setPasswordError('The password must be at least 8 characters long');\r\n    }\r\n\r\n    else if ((password !== confirmPassword)){\r\n        (passwordError !== 'The passwords do not match') && setPasswordError('The passwords do not match');\r\n    }\r\n    else {\r\n        (passwordError !== '') && setPasswordError('');\r\n    }\r\n\r\n    \r\n    //Check for Email errors\r\n    if ((email === '')){\r\n        (emailError !== 'An email is required') && setEmailError('An email is required');\r\n    }\r\n    else if ((!validateEmail(email))) {\r\n        (emailError !== 'You have entered an invalid email') && setEmailError('You have entered an invalid email');\r\n    }\r\n    else {\r\n        (emailError !== '') && setEmailError('');\r\n    }\r\n\r\n    //Check for Phone Number (optional) errors\r\n    if (!isNumber(phoneNumber)) {\r\n        (phoneNumberError !== 'The phone number may only contain numbers') && setPhoneNumberError('The phone number may only contain numbers');\r\n    }\r\n    else {\r\n        (phoneNumberError !== '') && setPhoneNumberError('');\r\n    }\r\n\r\n    //Check for First Name errors\r\n    if ((firstName === '')){\r\n        (firstNameError !== 'A first name is required') && setFirstNameError('A first name is required');\r\n    } \r\n    else {\r\n        (firstNameError !== '') && setFirstNameError('');\r\n    }\r\n\r\n    //Check for Last Name errors\r\n    if ((lastName === '')){\r\n        (lastNameError !== 'A last name is required') && setLastNameError('A last name is required');\r\n    }\r\n    else {\r\n        (lastNameError !== '') && setLastNameError('');\r\n    }\r\n}\r\n\r\nerrorCheckRender();\r\n\r\n//Decides whether the password is currently shown or not\r\nif (showPassword) {\r\n    showPasswordIcon = (\r\n        <div className={`hide-password ${passwordShake}`} onClick={() => setShowPassword(false)}></div>\r\n    );\r\n\r\n    passwordType = 'text';\r\n} else {\r\n    showPasswordIcon = (\r\n        <div className={`show-password ${passwordShake}`} onClick={() => setShowPassword(true)}></div>\r\n    );\r\n\r\n    passwordType = 'password';\r\n}\r\n\r\n //Decides whether the confirm password is currently shown or not\r\n if (showConfirmPassword) {\r\n    showConfirmPasswordIcon = (\r\n        <div className={`hide-password ${passwordShake}`} onClick={() => setShowConfirmPassword(false)}></div>\r\n    );\r\n\r\n    confirmPasswordType = 'text';\r\n} else {\r\n    showConfirmPasswordIcon = (\r\n        <div className={`show-password ${passwordShake}`} onClick={() => setShowConfirmPassword(true)}></div>\r\n    );\r\n\r\n    confirmPasswordType = 'password';\r\n}\r\n\r\n//Set error borders on inputs\r\nif (firstNameError) {\r\n    firstNameBorder = 'border-error';\r\n}\r\n\r\nif (lastNameError) {\r\n    lastNameBorder = 'border-error';\r\n}\r\n\r\nif (emailError) {\r\n    emailBorder = 'border-error';\r\n}\r\n\r\nif (phoneNumberError) {\r\n    phoneNumberBorder = 'border-error';\r\n}\r\n\r\nif (passwordError) {\r\n    passwordBorder = 'border-error';\r\n}\r\n\r\n    \r\n////////////////////////////////////////////////////////////\r\n    \r\n\r\n    if (nameEmailPassword === 0) {\r\n        regFormPage = (\r\n            <form className='register-form' onSubmit={handleNameNext}>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? firstNameError : null}</h5>\r\n                <input ref={firstNameElement} className={`register-form-item register-input ${(submittedOnce) ? firstNameBorder: 'border-normal'} ${firstNameShake}`} value={firstName} type='text' placeholder='First Name' onChange={e => setFirstName(e.target.value)}/>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? lastNameError : null}</h5>\r\n                <input className={`register-form-item register-input ${(submittedOnce) ? lastNameBorder: 'border-normal'} ${lastNameShake}`} value={lastName} type='text' placeholder='Last Name' onChange={e => setLastName(e.target.value)}/>\r\n                <div className='submission-buttons'>\r\n                    <button className='register-form-item register-button' type='submit'>Next</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    else if (nameEmailPassword === 1) {\r\n        regFormPage = (\r\n            <form className='register-form' onSubmit={handleEmailNext}>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? emailError : null}</h5>\r\n                <input ref={emailElement} className={`register-form-item register-input ${(submittedOnce) ? emailBorder: 'border-normal'} ${emailShake}`} value={email} type='text' placeholder='Email' onChange={e => setEmail(e.target.value)}/>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? phoneNumberError : null}</h5>\r\n                <input className={`register-form-item register-input ${(submittedOnce) ? phoneNumberBorder: 'border-normal'} ${phoneNumberShake}`} value={phoneNumber} type='text' placeholder='Phone Number' onChange={e => setPhoneNumber(e.target.value)}/>\r\n                <div></div>\r\n                <div className='submission-buttons'>\r\n                    <button className='register-form-item back-button' type='button' onClick={() => setNameEmailPassword(0)}>Back</button>\r\n                    <div className='register-form-item'></div>\r\n                    <button className='register-form-item register-button' type='submit'>Next</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    else {\r\n        regFormPage = (\r\n            <form className='register-form' onSubmit={handleSubmit}>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? passwordError : null}</h5>\r\n                <div className='password-container'>\r\n                    <input ref={passwordElement} className={`password-item register-input ${(submittedOnce) ? passwordBorder: 'border-normal'} ${passwordShake}`} type={passwordType} value={password} placeholder='Password' onChange={e => setPassword(e.target.value)}/>\r\n                    {showPasswordIcon}\r\n                </div>\r\n                <div className='password-container'>\r\n                    <input className={`password-item register-input ${(submittedOnce) ? passwordBorder: 'border-normal'} ${passwordShake}`} type={confirmPasswordType} value={confirmPassword} placeholder='Confirm Password' onChange={e => setConfirmPassword(e.target.value)}/>\r\n                    {showConfirmPasswordIcon}\r\n                </div>\r\n                {showHiddenDiv}\r\n                <div className='submission-buttons'>\r\n                    <button className='register-form-item back-button' type='button' onClick={() => setNameEmailPassword(1)}>Back</button>\r\n                    <div className='register-form-item'></div>\r\n                    <button className='register-form-item register-button' type='submit' disabled={loading}>\r\n                        {!loading && 'Sign up'}\r\n                        {loading && <Lottie options={defaultOptions} height={75} width={75}></Lottie>}\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n     //Password field should be secured and should not be openly updated in state\r\n\r\n    return (\r\n        <div className='register-container'>\r\n            <h1 className='welcome-message'>Create account</h1>\r\n            {regFormPage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n","import React, { useState, useEffect, useContext, useLayoutEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Login from './Login';\r\nimport Register from './Register';\r\nimport Lottie from 'react-lottie';\r\nimport { CSSTransition } from 'react-transition-group'; \r\nimport {Alert, Button} from 'react-bootstrap'\r\nimport loadingData from '../lotties/loading';\r\nimport Context from '../utils/context';\r\nimport '../css/Auth.css';\r\n\r\nconst Auth = (props) => {\r\n    const context = useContext(Context);\r\n    \r\n    const [loginRegister, setLoginRegister] = useState(false);\r\n    const [regNotification, setRegNotification] = useState([]);\r\n    const [logNotification, setLogNotification] = useState([]);\r\n    const [regShow, setRegShow] = useState(false);\r\n    const [logShow, setLogShow] = useState(false);\r\n    const [authEmail, setAuthEmail] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const { token } = props.match.params;\r\n\r\n    let gradientDisplay;\r\n    let resizeTimer;\r\n    let regNotificationDisplay;\r\n    let logNotificationDisplay;\r\n\r\n    useLayoutEffect(() => {\r\n        context.assignShowNav(false);\r\n        if (token === 'register'){\r\n            setLoginRegister(true);\r\n        }\r\n        \r\n        else if (token === 'login') {\r\n            setLoginRegister(false);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async() => {\r\n        let response;\r\n        let json;\r\n\r\n        if (localStorage.getItem('token')) {\r\n            localStorage.removeItem('token');\r\n            context.assignFName('');\r\n            context.assignLName('');\r\n        }\r\n\r\n        if (token){\r\n            if (token !== 'register' || token !== 'login'){\r\n                response = await fetch(`/api/confirm_email/${token}`);\r\n                json = await response.json();\r\n    \r\n                if (json.message === 'token_expired') {\r\n                    setLogNotification(['Verification Token Expired!', 'Your verification token session has expired. Please press Resend to send another verification link to your email.', 'danger']);\r\n                    setLogShow(true);\r\n                }\r\n                else if (json.message === 'email_already_confirmed') {\r\n                    setLogNotification(['Account already verified!', 'You have already verified this account.', 'warning']);\r\n                    setLogShow(true);\r\n                }\r\n                else if (json.message === 'email_confirm_success') {\r\n                    setLogNotification(['Account verified successfully!', 'Thank you for verifying your account. You may now log in.', 'success']);\r\n                    setLogShow(true);\r\n                }\r\n            }\r\n        }\r\n\r\n    }, []);\r\n\r\n    window.addEventListener(\"resize\", () => {\r\n    document.body.classList.add(\"resize-animation-stopper\");\r\n    clearTimeout(resizeTimer);\r\n    resizeTimer = setTimeout(() => {\r\n        document.body.classList.remove(\"resize-animation-stopper\");\r\n    }, 400);\r\n    });\r\n\r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: loadingData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: \"xMidYMid slice\"\r\n        }\r\n      };\r\n\r\n    const assignAuthEmail = (email) => {\r\n        setAuthEmail(email);\r\n    }\r\n\r\n    const assignRegNotif = (regNotif) => {\r\n        setRegNotification(regNotif);\r\n    }\r\n\r\n    const assignLogNotif = (logNotif) => {\r\n        setLogNotification(logNotif);\r\n    }\r\n\r\n    const regNotifClose = () => {\r\n        setRegShow(true);\r\n        setRegNotification([]);\r\n    }\r\n\r\n    const logNotifClose = () => {\r\n        setLogShow(true);\r\n        setLogNotification([]);\r\n    }\r\n\r\n    const handleResendToken = async() => {\r\n        let response;\r\n        let json;\r\n\r\n        setLoading(true);\r\n\r\n        response = await fetch('/api/resendToken', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email: authEmail\r\n            })\r\n        })\r\n\r\n        json = await response.json();\r\n\r\n        setLoading(false);\r\n\r\n\r\n    }\r\n\r\n    //Check for which screen the user is currently on (login or register)\r\n    if (loginRegister) {\r\n            gradientDisplay = ( <div className=\"gradient-display-background gradient-display-background-register\">\r\n                                    <div className='gradient-display gradient-display-register-rtrue'>\r\n                                        <h1 className='gradient-display-text'>Already have an account?</h1>\r\n                                        <button  onClick={() => {\r\n                                            setRegShow(false);\r\n                                            setRegNotification([]);\r\n                                            setLoginRegister(false)}} className='gradient-display-button gradient-display-button-red'>Login</button>\r\n                                    </div>\r\n                                    <div className='gradient-display gradient-display-register-bfalse'></div>\r\n                                </div>);\r\n    }\r\n\r\n    else {\r\n            gradientDisplay = ( <div className=\"gradient-display-background gradient-display-background-login\">\r\n                                    <div className='gradient-display gradient-display-login-rfalse'></div>\r\n                                    <div className='gradient-display gradient-display-login-btrue'>\r\n                                        <h1 className='gradient-display-text'>Don't have an account?</h1>\r\n                                        <button onClick={() => {\r\n                                            setLogShow(false);\r\n                                            setLogNotification([]);\r\n                                            setLoginRegister(true)}} className='gradient-display-button gradient-display-button-blue'>Register</button>\r\n                                    </div>\r\n                                </div>);\r\n    }\r\n\r\n    //Show any registration notifications\r\n    if (regNotification.length) {\r\n        regNotificationDisplay = (  <Alert className='alert-align auth-index' variant={regNotification[2]} onClose={() => regNotifClose()} dismissible>\r\n                                        <Alert.Heading>{regNotification[0]}</Alert.Heading>\r\n                                        <p>{regNotification[1]}</p>\r\n                                        {(regNotification[0] === 'Registration Successful!') && (<div className=\"d-flex justify-content-end\">\r\n                                            <Button onClick={() => handleResendToken()} variant=\"outline-success\" disabled={loading}>\r\n                                                {!loading && 'Resend'}\r\n                                                {loading && <Lottie options={defaultOptions} height={35} width={35}></Lottie>}\r\n                                            </Button>\r\n                                        </div>)}\r\n                                    </Alert>);\r\n        (regShow !== true) && setRegShow(true);\r\n    }\r\n\r\n    if (logNotification.length) {\r\n        logNotificationDisplay  = ( <Alert className='alert-align' variant={logNotification[2]} onClose={() => logNotifClose()} dismissible>\r\n                                        <Alert.Heading>{logNotification[0]}</Alert.Heading>\r\n                                        <p>{logNotification[1]}</p>\r\n                                        {(logNotification[0] === 'Account not verified!') && (<div className=\"d-flex justify-content-end\">\r\n                                            <Button onClick={() => handleResendToken()} variant=\"outline-warning\" disabled={loading}>\r\n                                                {!loading && 'Resend'}\r\n                                                {loading && <Lottie options={defaultOptions} height={35} width={35}></Lottie>}\r\n                                            </Button>\r\n                                        </div>)}\r\n                                    </Alert>);\r\n        (logShow !== true) && setLogShow(true);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"auth-container\">\r\n            <Link className={`auth-logo ${(loginRegister) ? 'auth-logo-register' : 'auth-logo-login'}`} to='/'>Diabetes Doctor</Link>\r\n            {gradientDisplay}\r\n\r\n            <div className='fill'>\r\n                \r\n                \r\n                <CSSTransition\r\n                    in={loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"reg-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <div className='auth-notification-container'>\r\n                        {regShow && regNotificationDisplay}\r\n                    </div>\r\n                </CSSTransition>\r\n                \r\n                <CSSTransition\r\n                    in={loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"reg-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <Register assignRegNotif={(regNotif) => assignRegNotif(regNotif)}\r\n                              assignAuthEmail={(email) => assignAuthEmail(email)}/>\r\n                </CSSTransition>\r\n            </div>\r\n            <div className='fill'>\r\n                \r\n                <CSSTransition\r\n                    in={!loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"login-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <div className='auth-notification-container'>\r\n                        {logShow && logNotificationDisplay}\r\n                    </div>\r\n                </CSSTransition>\r\n                <CSSTransition\r\n                    in={!loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"login-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <Login assignLogNotif={(logNotif) => assignLogNotif(logNotif)}\r\n                           assignAuthEmail={(email) => assignAuthEmail(email)}/>\r\n                </CSSTransition>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth;\r\n","import React, { useState, Fragment, useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\r\nimport Wave from 'react-wavify';\r\nimport '../css/Navigation.css';\r\nimport Context from '../utils/context';\r\n\r\nconst Navigation = () => {\r\n    const context = useContext(Context);\r\n    const [navbarColor, setNavbarColor] = useState('Home');\r\n    let rightNav;\r\n\r\n    const getUserInfo = async () => {\r\n        let response = await fetch('/api/user', {headers: { 'x-access-tokens': localStorage.getItem('token')}});\r\n        let json = await response.json();\r\n        context.assignFName(json.firstName);\r\n        context.assignLName(json.lastName);\r\n    }\r\n    const signoutUser = () => {\r\n        localStorage.removeItem('token');\r\n        context.assignFName('');\r\n        context.assignLName('');\r\n    }\r\n\r\n    if (localStorage.getItem('token')) {\r\n        if (context.stateFName === '' && context.stateLName === '') {\r\n            getUserInfo();\r\n        }\r\n        rightNav = (<Fragment>\r\n                        <NavDropdown alignRight title={`Welcome, ${context.stateFName} ${context.stateLName}`} id=\"collasible-nav-dropdown\" className='navbar-profile-dropdown'>\r\n                            <NavDropdown.Item onClick={() => signoutUser()}>\r\n                                Sign out\r\n                            </NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Fragment>);\r\n    } else {\r\n        rightNav = (<Fragment>\r\n            <Nav.Link>\r\n                <Link to=\"/auth/register\" onClick={() => setNavbarColor('Home')} className=\"navbar-item-button-c\">\r\n                    <button className='navbar-signup-c'>Sign up</button>\r\n                </Link>\r\n            </Nav.Link>\r\n            <Nav.Link>\r\n                <Link to=\"/auth/login\" onClick={() => setNavbarColor('Home')} className=\"navbar-item-button-c\">\r\n                    <button className='navbar-signin-c'>Sign in</button>\r\n                </Link>\r\n            </Nav.Link>\r\n        </Fragment>);\r\n    }\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" className='navbar-c'>\r\n                <Navbar.Brand>\r\n                    <Link to='/' onClick={() => setNavbarColor('Home')} className='navbar-item-c navbar-item-width-height navbar-title'>\r\n                        Diabetes Doctor\r\n                    </Link>\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className='m-auto navbar-item-font'>\r\n                        <Nav.Link>\r\n                            <Link to='/predict' onClick={() => setNavbarColor('Predictor')} className={`navbar-item-c navbar-item-width-height ${(navbarColor === 'Predictor') ? 'navbar-selected' : 'navbar-item-normal'}`}>\r\n                                Predictor\r\n                            </Link>\r\n                        </Nav.Link>\r\n                        <Nav.Link>\r\n                            <Link to='/track' onClick={() => setNavbarColor('Tracker')} className={`navbar-item-c navbar-item-width-height ${(navbarColor === 'Tracker') ? 'navbar-selected' : 'navbar-item-normal'}`}>\r\n                                Tracker\r\n                            </Link>\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                    <Nav>\r\n                        {rightNav}\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            <Wave fill='#fff'\r\n                paused={false}\r\n                className='navbar-wave navbar-wave-1'\r\n                options={{\r\n                height: 15,\r\n                amplitude: 20,\r\n                speed: 0.15,\r\n                points: 4\r\n                }}\r\n            />\r\n\r\n            <Wave fill='#f6f6f6'\r\n                paused={false}\r\n                className='navbar-wave navbar-wave-2'\r\n                options={{\r\n                height: 20,\r\n                amplitude: 25,\r\n                speed: 0.15,\r\n                points: 3\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default Navigation","import React, { useLayoutEffect, useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport Context from '../utils/context';\r\n\r\nconst Tracker = () => {\r\n    const context = useContext(Context);\r\n\r\n    useLayoutEffect(() => {\r\n        context.assignShowNav(true);\r\n    }, []);\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Tracker</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tracker; \r\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Context from './utils/context';\nimport Home from './components/Home';\nimport PredictorForm from './components/PredictorForm';\nimport Result from './components/Result';\nimport Auth from './components/Auth';\nimport Navigation from './components/Navigation';\nimport Tracker from './components/Tracker';\n\nfunction App() {\n  const [prediction, setPrediction] = useState(false);\n  const [showNav, setShowNav] = useState(true);\n  const [token, setToken] = useState();\n  const [fName, setFName] = useState('');\n  const [lName, setLName] = useState('');\n\n  const assignPrediction = (pred) => {\n    setPrediction(pred);\n  }\n\n  const assignToken = (token) => {\n    setToken(token);\n  }\n  \n  const assignShowNav = (show) => {\n    setShowNav(show);\n  }\n\n  const assignFName = (firstname) => {\n    setFName(firstname);\n  }\n\n  const assignLName = (lastname) => {\n    setLName(lastname);\n  }\n  \n  return (\n    <Context.Provider value = {{\n      statePrediction: prediction,\n      assignPredictionFunction: (pred) => assignPrediction(pred),\n      stateToken: token,\n      assignTokenFunction: (token) => assignToken(token),\n      stateNav: showNav,\n      assignShowNav: (show) => assignShowNav(show),\n      stateFName: fName,\n      assignFName: (firstname) => assignFName(firstname),\n      stateLName: lName,\n      assignLName: (lastname) => assignLName(lastname)\n    }}>\n      <Router>\n        <div className=\"App\">\n          {(showNav) && <Navigation />}\n          <Switch>\n            <Route exact path='/' component={Home}/>\n            <Route exact path='/predict' component={PredictorForm}/>\n            <Route exact path='/track' component={Tracker}/>\n            <Route exact path='/results' component={Result}/>\n            <Route exact path='/auth/:token?' component={Auth}/>\n          </Switch>\n        </div>\n      </Router>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}