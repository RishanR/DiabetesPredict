{"version":3,"sources":["utils/context.js","components/Home.js","components/PredictorForm.js","components/Result.js","components/Predictor.js","components/Login.js","components/Register.js","components/Auth.js","components/Navigation.js","components/Tracker.js","App.js","index.js"],"names":["Context","createContext","Home","context","useContext","useLayoutEffect","assignShowNav","PredictorForm","props","useState","pregnancies","setPregnancies","glucose","setGlucose","bloodpressure","setBloodpressure","skinthickness","setSkinthickness","insulin","setInsulin","bmi","setBmi","dpf","setDpf","age","setAge","handleSubmit","e","a","preventDefault","localStorage","getItem","fetch","method","headers","body","JSON","stringify","response","json","assignPredictionFunction","console","log","assignPredictResults","assignResult","assignResultFace","className","onSubmit","type","placeholder","onChange","target","value","Result","stateResultFace","stateResult","onClick","Predictor","useHistory","predictInnerBackground","predictResults","setPredictResults","result","setResult","resultFace","setResultFace","page","CSSTransition","in","timeout","classNames","unmountOnExit","text","face","fill","paused","options","height","amplitude","speed","points","Login","showPasswordIcon","passwordType","history","email","setEmail","password","setPassword","showPassword","setShowPassword","loading","setLoading","emailElement","useRef","useEffect","current","focus","defaultOptions","loop","autoplay","animationData","loadingData","rendererSettings","preserveAspectRatio","token","setItem","assignFName","firstName","assignLName","lastName","assignLogNotif","push","message","assignAuthEmail","ref","disabled","width","Register","regFormPage","confirmPasswordType","showConfirmPasswordIcon","setFirstName","setLastName","confirmPassword","setConfirmPassword","phoneNumber","setPhoneNumber","nameEmailPassword","setNameEmailPassword","showConfirmPassword","setShowConfirmPassword","submittedOnce","setSubmittedOnce","firstNameError","setFirstNameError","lastNameError","setLastNameError","emailError","setEmailError","phoneNumberError","setPhoneNumberError","passwordError","setPasswordError","firstNameShake","setFirstNameShake","lastNameShake","setLastNameShake","emailShake","setEmailShake","phoneNumberShake","setPhoneNumberShake","passwordShake","setPasswordShake","firstNameElement","passwordElement","firstNameBorder","lastNameBorder","emailBorder","phoneNumberBorder","passwordBorder","errorCheckSubmit","healthCard","assignRegNotif","validateEmail","address","test","isNumber","phone","clearShake","length","showHiddenDiv","Auth","gradientDisplay","resizeTimer","regNotificationDisplay","logNotificationDisplay","loginRegister","setLoginRegister","regNotification","setRegNotification","logNotification","setLogNotification","regShow","setRegShow","logShow","setLogShow","authEmail","setAuthEmail","match","params","removeItem","window","addEventListener","document","classList","add","clearTimeout","setTimeout","remove","handleResendToken","Alert","variant","onClose","dismissible","Heading","Button","to","regNotif","logNotif","Navigation","rightNav","navbarColor","setNavbarColor","getUserInfo","stateFName","stateLName","NavDropdown","alignRight","title","id","Item","Nav","Link","Navbar","collapseOnSelect","expand","bg","Brand","Toggle","aria-controls","Collapse","Tracker","App","prediction","setPrediction","showNav","setShowNav","setToken","fName","setFName","lName","setLName","Provider","statePrediction","pred","assignPrediction","stateToken","assignTokenFunction","assignToken","stateNav","show","firstname","lastname","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"js/main.67f81ac1.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst Context = createContext();\r\n\r\nexport default Context;\r\n","import React, { useLayoutEffect, useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport Context from '../utils/context';\r\n\r\nconst Home = () => {\r\n    const context = useContext(Context);\r\n\r\n    useLayoutEffect(() => {\r\n        context.assignShowNav(true);\r\n    }, []);\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Home</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useContext, Fragment } from 'react';\r\nimport Context from '../utils/context';\r\nimport '../css/PredictorForm.css'\r\n\r\nconst PredictorForm = (props) => {\r\n    const context = useContext(Context);\r\n    const [pregnancies, setPregnancies] = useState(0);\r\n    const [glucose, setGlucose] = useState(0);\r\n    const [bloodpressure, setBloodpressure] = useState(0);\r\n    const [skinthickness, setSkinthickness] = useState(0);\r\n    const [insulin, setInsulin] = useState(0);\r\n    const [bmi, setBmi] = useState(0);\r\n    const [dpf, setDpf] = useState(0);\r\n    const [age, setAge] = useState(0);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (localStorage.getItem('token')){\r\n\r\n        \r\n            const response = await fetch('/api/predict', {\r\n                method: 'POST',\r\n                headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-access-tokens': localStorage.getItem('token')\r\n                },\r\n                body: JSON.stringify({\r\n                    pregnancies,\r\n                    glucose,\r\n                    bloodpressure,\r\n                    skinthickness,\r\n                    insulin,\r\n                    bmi,\r\n                    dpf,\r\n                    age\r\n                })\r\n            })\r\n\r\n            const json = await response.json();\r\n            context.assignPredictionFunction(json[0])\r\n            //history.push('/results')\r\n            console.log(json[0])\r\n            props.assignPredictResults(1);\r\n            if (json[0]) {\r\n                props.assignResult('Oh no! You have diabetes!');\r\n                props.assignResultFace(<div className='frown-container'></div>);\r\n            } \r\n            else {\r\n                props.assignResult(\"Great! You don't have diabetes!\");\r\n                props.assignResultFace(<div className='smile-container'></div>);\r\n            }\r\n        } else {\r\n            console.log('You must be logged in to predict.')\r\n        }\r\n            \r\n    }\r\n    \r\n    return (\r\n        <div className='predictor-form-fill'>\r\n            <h1 className='predict-title'>Do you have <span className='predict-title-diabetes'>diabetes?</span></h1>\r\n                            \r\n            <form onSubmit={handleSubmit} className=\"predict-form\">\r\n                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Pregnancies\" onChange={e => setPregnancies(e.target.value)}/>\r\n                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Glucose\" onChange={e => setGlucose(e.target.value)}/>\r\n                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Bloodpressure\" onChange={e => setBloodpressure(e.target.value)}/>\r\n                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Skinthickness\" onChange={e => setSkinthickness(e.target.value)}/>\r\n                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Insulin\" onChange={e => setInsulin(e.target.value)}/>\r\n                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Bmi\" onChange={e => setBmi(e.target.value)}/>\r\n                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Dpf\" onChange={e => setDpf(e.target.value)}/>\r\n                <input className=\"predict-form-item predict-input\" type=\"text\" placeholder=\"Age\" onChange={e => setAge(e.target.value)}/>\r\n                <button className=\"predict-form-item predict-button\" type=\"submit\">Predict</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PredictorForm;\r\n","import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../css/Result.css'\r\n\r\nconst Result = (props) => {\r\n    return (\r\n        <div className='result-container'>\r\n            <h1 className='result-title'>Results</h1>\r\n            {props.stateResultFace}\r\n            <h2>{props.stateResult}</h2>\r\n            <button className='result-form-item result-back-button' type='button' onClick={() => props.assignPredictResults(0)}>Back</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result;\r\n","import React, { useState, useContext, useLayoutEffect, Fragment } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport Wave from 'react-wavify';\r\nimport Context from '../utils/context';\r\nimport { CSSTransition } from 'react-transition-group'; \r\nimport '../css/Predictor.css';\r\nimport PredictorForm from './PredictorForm';\r\nimport Result from './Result';\r\n\r\nconst Predictor = () => {\r\n    //Values that give a prediction outcome of True (Have Diabetes) for\r\n    //the Random Forest Classification model:\r\n    \r\n    //const testData = {\r\n    //    pregnancies: 1,\r\n    //    glucose: 117,\r\n    //    bloodpressure: 88,\r\n    //    skinthickness: 24,\r\n    //    insulin: 145,\r\n    //    bmi: 34.5,\r\n    //    dpf: 0.403,\r\n    //    age: 40\r\n    //}\r\n    \r\n    let history = useHistory();\r\n    const context = useContext(Context);\r\n\r\n    const [predictResults, setPredictResults] = useState(0);\r\n    const [result, setResult] = useState('');\r\n    const [resultFace, setResultFace] = useState(null);\r\n\r\n    let predictInnerBackground;\r\n\r\n    useLayoutEffect(() => {\r\n        context.assignShowNav(true);\r\n    });\r\n\r\n    const assignPredictResults = (page) => {\r\n        setPredictResults(page);\r\n    }\r\n\r\n    const assignResult = (text) => { \r\n        setResult(text);\r\n    }\r\n\r\n    const assignResultFace = (face) => {\r\n        setResultFace(face);\r\n    }\r\n\r\n    if (predictResults) {\r\n        if (result === 'Oh no! You have diabetes!') {\r\n            predictInnerBackground = 'predict-inner-red';\r\n        }\r\n\r\n        else if (result === \"Great! You don't have diabetes!\") {\r\n            predictInnerBackground = 'predict-inner-green';\r\n        }\r\n    } else {\r\n        console.log('test')\r\n        predictInnerBackground = 'predict-inner-white'\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className='predict-background-container'></div>\r\n            <div className='predict-page-main-container'>\r\n                <div className='predict-main-container'>\r\n                    <div className={`predict-inner-container ${predictInnerBackground}`}>\r\n                        <CSSTransition\r\n                            in={!predictResults}\r\n                            timeout={1000}\r\n                            classNames=\"predict-transition\"\r\n                            unmountOnExit\r\n                        >\r\n                            <div className='predict-form-position'>\r\n                                \r\n                                    <PredictorForm  assignPredictResults={(page) => assignPredictResults(page)}\r\n                                                    assignResult={(text) => assignResult(text)}\r\n                                                    assignResultFace={(face) => assignResultFace(face)}/>\r\n                                \r\n                            </div>\r\n                        </CSSTransition>\r\n\r\n                        <CSSTransition\r\n                            in={predictResults}\r\n                            timeout={1000}\r\n                            classNames=\"predict-transition\"\r\n                            unmountOnExit\r\n                        >\r\n                            <div className='predict-form-position'>\r\n                                    <Result className='result-component' assignPredictResults={(page) => assignPredictResults(page)}\r\n                                            stateResult={result}\r\n                                            stateResultFace={resultFace}/>\r\n                            </div>\r\n                        </CSSTransition>\r\n                    </div>                \r\n                </div>\r\n                <div className='prediction-hist-main-container'>\r\n                    <Wave fill='#fff'\r\n                        paused={false}\r\n                        className='predictor-wave predictor-wave-1'\r\n                        options={{\r\n                        height: 15,\r\n                        amplitude: 20,\r\n                        speed: 0.15,\r\n                        points: 4\r\n                        }}\r\n                    />\r\n\r\n                    <Wave fill='#f6f6f6'\r\n                        paused={false}\r\n                        className='predictor-wave predictor-wave-2'\r\n                        options={{\r\n                        height: 20,\r\n                        amplitude: 25,\r\n                        speed: 0.15,\r\n                        points: 3\r\n                        }}\r\n                    />\r\n\r\n                    <h1 className='predict-title'>Prediction History</h1>\r\n\r\n                    <div className='prediction-hist-inner-container'></div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default Predictor;","import React, { useState, useContext, useEffect, useRef } from 'react';\r\nimport '../css/Login.css';\r\nimport Context from '../utils/context'\r\nimport Lottie from 'react-lottie';\r\nimport loadingData from '../lotties/loading';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Login = (props) => {\r\n    const context = useContext(Context);\r\n    let history = useHistory();\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const emailElement = useRef(null);\r\n\r\n    let showPasswordIcon;\r\n    let passwordType;\r\n\r\n    useEffect(() => {\r\n        emailElement.current.focus();\r\n    }, [emailElement])\r\n\r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: loadingData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: \"xMidYMid slice\"\r\n        }\r\n      };\r\n\r\n    const handleSubmit = async e => {\r\n        \r\n        e.preventDefault();\r\n        let response;\r\n        let json;\r\n\r\n        setLoading(true);\r\n\r\n        //Post email and password to back end and get authenticated\r\n        response = await fetch('/api/login', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email,\r\n                password\r\n            })\r\n        })\r\n\r\n        json = await response.json();\r\n\r\n\r\n        if (json.token){\r\n            localStorage.setItem('token', json.token);\r\n            response = await fetch('/api/user', {headers: { 'x-access-tokens': json.token}});\r\n            json = await response.json();\r\n            setLoading(false);\r\n            context.assignFName(json.firstName);\r\n            context.assignLName(json.lastName);\r\n            props.assignLogNotif([]);\r\n            history.push('/');\r\n        } else if (json.message === 'User is not verified'){\r\n            setLoading(false)\r\n            props.assignAuthEmail(email);\r\n            props.assignLogNotif(['Account not verified!', 'This account has not yet been verified. If you are the owner of this account and did not recieve a verification email, please click Resend to send another verification link to your email.', 'warning']);\r\n        } else if (json.message === 'A user with this email does not exist.') {\r\n            setLoading(false)\r\n            props.assignLogNotif(['Account not found!', 'A user with this email does not exist.', 'danger']);\r\n        } else if (json.message === 'Your email or password is incorrect') {\r\n            setLoading(false)\r\n            props.assignLogNotif(['Invalid Credentials!', 'Your email or password is incorrect.', 'danger']);\r\n        }\r\n        \r\n    }\r\n\r\n    if (showPassword) {\r\n        showPasswordIcon = (\r\n            <div className='hide-password' onClick={() => setShowPassword(false)}></div>\r\n        );\r\n\r\n        passwordType = 'text';\r\n    } else {\r\n        showPasswordIcon = (\r\n            <div className='show-password' onClick={() => setShowPassword(true)}></div>\r\n        );\r\n\r\n        passwordType = 'password';\r\n    }\r\n\r\n    //Password field should be secured and should not be openly updated in state\r\n\r\n    return (\r\n        <div className='login-container'>\r\n            <h1 className='welcome-message'>Welcome</h1>\r\n            <form className='login-form' onSubmit={handleSubmit}>\r\n                <input ref={emailElement} className='login-form-item login-input' type='text' placeholder='Email' onChange={e => setEmail(e.target.value)}/>\r\n                <div className='password-container'>\r\n                    <input className='password-item login-input' type={passwordType} placeholder='Password' onChange={e => setPassword(e.target.value)}/>\r\n                    {showPasswordIcon}\r\n                </div>\r\n                <button className='login-form-item login-button' type='submit' disabled={loading}>\r\n                    {!loading && 'Sign in'}\r\n                    {loading && <Lottie options={defaultOptions} height={75} width={75}></Lottie>}\r\n                </button>\r\n                \r\n            </form>\r\n            <h5 className='forgot-password'>Forgot your password?</h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, { useState, useEffect, useRef } from 'react';\r\nimport '../css/Register.css';\r\nimport Lottie from 'react-lottie';\r\nimport loadingData from '../lotties/loading';\r\n\r\nconst Register = (props) => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n\r\n    const [nameEmailPassword, setNameEmailPassword] = useState(0);\r\n\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n\r\n    const [submittedOnce, setSubmittedOnce] = useState(false);\r\n    const [submitted, setSubmitted] = useState(false);\r\n\r\n    const [firstNameError, setFirstNameError] = useState('');\r\n    const [lastNameError, setLastNameError] = useState('');\r\n    const [emailError, setEmailError] = useState('');\r\n    const [phoneNumberError, setPhoneNumberError] = useState('');\r\n    const [passwordError, setPasswordError] = useState('');\r\n\r\n    const [firstNameShake, setFirstNameShake] = useState('');\r\n    const [lastNameShake, setLastNameShake] = useState('');\r\n    const [emailShake, setEmailShake] = useState('');\r\n    const [phoneNumberShake, setPhoneNumberShake] = useState('');\r\n    const [passwordShake, setPasswordShake] = useState('');\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const firstNameElement = useRef(null);\r\n    const emailElement = useRef(null);\r\n    const passwordElement = useRef(null);\r\n\r\n\r\n    let regFormPage;\r\n    let passwordType;\r\n    let confirmPasswordType;\r\n    let showPasswordIcon;\r\n    let showConfirmPasswordIcon;\r\n    let showHiddenDiv;\r\n\r\n    let firstNameBorder = 'border-normal';\r\n    let lastNameBorder = 'border-normal';\r\n    let emailBorder = 'border-normal';\r\n    let phoneNumberBorder = 'border-normal';\r\n    let passwordBorder = 'border-normal';\r\n    \r\n    useEffect(() => {\r\n        if (nameEmailPassword === 0) {\r\n            firstNameElement.current.focus();\r\n        }\r\n        else if (nameEmailPassword === 1) {\r\n            emailElement.current.focus();\r\n        }\r\n        else {\r\n            passwordElement.current.focus();\r\n        }\r\n    }, [nameEmailPassword]);\r\n\r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: loadingData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: \"xMidYMid slice\"\r\n        }\r\n      };\r\n      \r\n    const handleNameNext = (e) => {\r\n        e.preventDefault();\r\n        setNameEmailPassword(1);\r\n        clearShake();\r\n    }\r\n\r\n    const handleEmailNext = (e) => {\r\n        e.preventDefault();\r\n        setNameEmailPassword(2);\r\n        clearShake();\r\n    }\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n\r\n        setLoading(true);\r\n        setSubmittedOnce(true);\r\n        errorCheckSubmit();\r\n\r\n        if (firstNameError || lastNameError || emailError || phoneNumberError || passwordError) {\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        const response = await fetch('/api/register', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                firstName,\r\n                lastName,\r\n                email,\r\n                healthCard: '',\r\n                phoneNumber,\r\n                password,\r\n                confirmPassword\r\n            })\r\n        })\r\n\r\n        const json = await response.json();\r\n\r\n        props.assignAuthEmail(email);\r\n        setLoading(false);\r\n\r\n        if (json.message === 'User Created') {\r\n            props.assignRegNotif(['Registration Successful!', `Thank you for registering ${firstName}, please verify your account by clicking the verification link sent to your email.`, 'success']);\r\n        }\r\n\r\n        else if (json.message === 'A user with this email already exists.') {\r\n            props.assignRegNotif(['Email already in use!',`A user with the email ${email} already exists. Please use another email.`, 'danger']);\r\n        }\r\n    }\r\n\r\n    const validateEmail = address => {\r\n        return /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(address);\r\n    }\r\n\r\n    const isNumber = phone => {\r\n        return /^\\d*$/.test(phone);\r\n    }\r\n\r\n    const clearShake = () => {\r\n        (passwordShake !== '') && setPasswordShake('');\r\n        (emailShake !== '') && setEmailShake('');\r\n        (phoneNumberShake !== '') && setPhoneNumberShake('');\r\n        (firstNameShake !== '') && setFirstNameShake('');\r\n        (lastNameShake !== '') && setLastNameShake('');\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n/////////////// FRONTEND ERROR-CHECKING ////////////////////\r\nconst errorCheckSubmit = () => {\r\n    //Check for Password and Confirm Password errors\r\n    if ((password === '')){\r\n        setPasswordError('A password is required');\r\n        setNameEmailPassword(2);\r\n        setPasswordShake('shake-error');\r\n    }\r\n\r\n    else if ((password.length < 8)) {\r\n        setPasswordError('The password must be at least 8 characters long');\r\n        setNameEmailPassword(2);\r\n        setPasswordShake('shake-error');\r\n    }\r\n\r\n    else if ((password !== confirmPassword)){\r\n        setPasswordError('The passwords do not match');\r\n        setNameEmailPassword(2);\r\n        setPasswordShake('shake-error');\r\n    }\r\n    else {\r\n        setPasswordError('');\r\n        setPasswordShake('');\r\n    }\r\n\r\n    \r\n    //Check for Email errors\r\n    if ((email === '')){\r\n        setEmailError('An email is required');\r\n        setNameEmailPassword(1);\r\n        setEmailShake('shake-error');\r\n    }\r\n    else if ((!validateEmail(email))) {\r\n        setEmailError('You have entered an invalid email');\r\n        setNameEmailPassword(1);\r\n        setEmailShake('shake-error');\r\n    }\r\n    else {\r\n        setEmailError('');\r\n        setEmailShake('');\r\n    }\r\n\r\n    //Check for Phone Number (optional) errors\r\n    if (!isNumber(phoneNumber)) {\r\n        setPhoneNumberError('The phone number may only contain numbers');\r\n        setNameEmailPassword(1);\r\n        setPhoneNumberShake('shake-error');\r\n    }\r\n    else {\r\n        setPhoneNumberError('');\r\n        setPhoneNumberShake('');\r\n    }\r\n\r\n    //Check for First Name errors\r\n    if ((firstName === '')){\r\n        setFirstNameError('A first name is required');\r\n        setNameEmailPassword(0);\r\n        setFirstNameShake('shake-error');\r\n    } \r\n    else {\r\n        setFirstNameError('');\r\n        setFirstNameShake('');\r\n    }\r\n\r\n    //Check for Last Name errors\r\n    if ((lastName === '')){\r\n        setLastNameError('A last name is required');\r\n        setNameEmailPassword(0);\r\n        setLastNameShake('shake-error');\r\n    }\r\n    else {\r\n        setLastNameError('');\r\n        setLastNameShake('');\r\n    }\r\n    \r\n    \r\n}\r\n\r\nconst errorCheckRender = () => {\r\n    //Check for Password and Confirm Password errors\r\n    if ((password === '')){\r\n        (passwordError !== 'A password is required') && setPasswordError('A password is required');\r\n    }\r\n\r\n    else if ((password.length < 8)) {\r\n        (passwordError !== 'The password must be at least 8 characters long') && setPasswordError('The password must be at least 8 characters long');\r\n    }\r\n\r\n    else if ((password !== confirmPassword)){\r\n        (passwordError !== 'The passwords do not match') && setPasswordError('The passwords do not match');\r\n    }\r\n    else {\r\n        (passwordError !== '') && setPasswordError('');\r\n    }\r\n\r\n    \r\n    //Check for Email errors\r\n    if ((email === '')){\r\n        (emailError !== 'An email is required') && setEmailError('An email is required');\r\n    }\r\n    else if ((!validateEmail(email))) {\r\n        (emailError !== 'You have entered an invalid email') && setEmailError('You have entered an invalid email');\r\n    }\r\n    else {\r\n        (emailError !== '') && setEmailError('');\r\n    }\r\n\r\n    //Check for Phone Number (optional) errors\r\n    if (!isNumber(phoneNumber)) {\r\n        (phoneNumberError !== 'The phone number may only contain numbers') && setPhoneNumberError('The phone number may only contain numbers');\r\n    }\r\n    else {\r\n        (phoneNumberError !== '') && setPhoneNumberError('');\r\n    }\r\n\r\n    //Check for First Name errors\r\n    if ((firstName === '')){\r\n        (firstNameError !== 'A first name is required') && setFirstNameError('A first name is required');\r\n    } \r\n    else {\r\n        (firstNameError !== '') && setFirstNameError('');\r\n    }\r\n\r\n    //Check for Last Name errors\r\n    if ((lastName === '')){\r\n        (lastNameError !== 'A last name is required') && setLastNameError('A last name is required');\r\n    }\r\n    else {\r\n        (lastNameError !== '') && setLastNameError('');\r\n    }\r\n}\r\n\r\nerrorCheckRender();\r\n\r\n//Decides whether the password is currently shown or not\r\nif (showPassword) {\r\n    showPasswordIcon = (\r\n        <div className={`hide-password ${passwordShake}`} onClick={() => setShowPassword(false)}></div>\r\n    );\r\n\r\n    passwordType = 'text';\r\n} else {\r\n    showPasswordIcon = (\r\n        <div className={`show-password ${passwordShake}`} onClick={() => setShowPassword(true)}></div>\r\n    );\r\n\r\n    passwordType = 'password';\r\n}\r\n\r\n //Decides whether the confirm password is currently shown or not\r\n if (showConfirmPassword) {\r\n    showConfirmPasswordIcon = (\r\n        <div className={`hide-password ${passwordShake}`} onClick={() => setShowConfirmPassword(false)}></div>\r\n    );\r\n\r\n    confirmPasswordType = 'text';\r\n} else {\r\n    showConfirmPasswordIcon = (\r\n        <div className={`show-password ${passwordShake}`} onClick={() => setShowConfirmPassword(true)}></div>\r\n    );\r\n\r\n    confirmPasswordType = 'password';\r\n}\r\n\r\n//Set error borders on inputs\r\nif (firstNameError) {\r\n    firstNameBorder = 'border-error';\r\n}\r\n\r\nif (lastNameError) {\r\n    lastNameBorder = 'border-error';\r\n}\r\n\r\nif (emailError) {\r\n    emailBorder = 'border-error';\r\n}\r\n\r\nif (phoneNumberError) {\r\n    phoneNumberBorder = 'border-error';\r\n}\r\n\r\nif (passwordError) {\r\n    passwordBorder = 'border-error';\r\n}\r\n\r\n    \r\n////////////////////////////////////////////////////////////\r\n    \r\n\r\n    if (nameEmailPassword === 0) {\r\n        regFormPage = (\r\n            <form className='register-form' onSubmit={handleNameNext}>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? firstNameError : null}</h5>\r\n                <input ref={firstNameElement} className={`register-form-item register-input ${(submittedOnce) ? firstNameBorder: 'border-normal'} ${firstNameShake}`} value={firstName} type='text' placeholder='First Name' onChange={e => setFirstName(e.target.value)}/>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? lastNameError : null}</h5>\r\n                <input className={`register-form-item register-input ${(submittedOnce) ? lastNameBorder: 'border-normal'} ${lastNameShake}`} value={lastName} type='text' placeholder='Last Name' onChange={e => setLastName(e.target.value)}/>\r\n                <div className='submission-buttons'>\r\n                    <button className='register-form-item register-button' type='submit'>Next</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    else if (nameEmailPassword === 1) {\r\n        regFormPage = (\r\n            <form className='register-form' onSubmit={handleEmailNext}>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? emailError : null}</h5>\r\n                <input ref={emailElement} className={`register-form-item register-input ${(submittedOnce) ? emailBorder: 'border-normal'} ${emailShake}`} value={email} type='text' placeholder='Email' onChange={e => setEmail(e.target.value)}/>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? phoneNumberError : null}</h5>\r\n                <input className={`register-form-item register-input ${(submittedOnce) ? phoneNumberBorder: 'border-normal'} ${phoneNumberShake}`} value={phoneNumber} type='text' placeholder='Phone Number' onChange={e => setPhoneNumber(e.target.value)}/>\r\n                <div></div>\r\n                <div className='submission-buttons'>\r\n                    <button className='register-form-item back-button' type='button' onClick={() => setNameEmailPassword(0)}>Back</button>\r\n                    <div className='register-form-item'></div>\r\n                    <button className='register-form-item register-button' type='submit'>Next</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    else {\r\n        regFormPage = (\r\n            <form className='register-form' onSubmit={handleSubmit}>\r\n                <h5 className='input-error-message'>{(submittedOnce) ? passwordError : null}</h5>\r\n                <div className='password-container'>\r\n                    <input ref={passwordElement} className={`password-item register-input ${(submittedOnce) ? passwordBorder: 'border-normal'} ${passwordShake}`} type={passwordType} value={password} placeholder='Password' onChange={e => setPassword(e.target.value)}/>\r\n                    {showPasswordIcon}\r\n                </div>\r\n                <div className='password-container'>\r\n                    <input className={`password-item register-input ${(submittedOnce) ? passwordBorder: 'border-normal'} ${passwordShake}`} type={confirmPasswordType} value={confirmPassword} placeholder='Confirm Password' onChange={e => setConfirmPassword(e.target.value)}/>\r\n                    {showConfirmPasswordIcon}\r\n                </div>\r\n                {showHiddenDiv}\r\n                <div className='submission-buttons'>\r\n                    <button className='register-form-item back-button' type='button' onClick={() => setNameEmailPassword(1)}>Back</button>\r\n                    <div className='register-form-item'></div>\r\n                    <button className='register-form-item register-button' type='submit' disabled={loading}>\r\n                        {!loading && 'Sign up'}\r\n                        {loading && <Lottie options={defaultOptions} height={75} width={75}></Lottie>}\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n     //Password field should be secured and should not be openly updated in state\r\n\r\n    return (\r\n        <div className='register-container'>\r\n            <h1 className='welcome-message'>Create account</h1>\r\n            {regFormPage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n","import React, { useState, useEffect, useContext, useLayoutEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Login from './Login';\r\nimport Register from './Register';\r\nimport Lottie from 'react-lottie';\r\nimport { CSSTransition } from 'react-transition-group'; \r\nimport {Alert, Button} from 'react-bootstrap'\r\nimport loadingData from '../lotties/loading';\r\nimport Context from '../utils/context';\r\nimport '../css/Auth.css';\r\n\r\nconst Auth = (props) => {\r\n    const context = useContext(Context);\r\n    \r\n    const [loginRegister, setLoginRegister] = useState(false);\r\n    const [regNotification, setRegNotification] = useState([]);\r\n    const [logNotification, setLogNotification] = useState([]);\r\n    const [regShow, setRegShow] = useState(false);\r\n    const [logShow, setLogShow] = useState(false);\r\n    const [authEmail, setAuthEmail] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const { token } = props.match.params;\r\n\r\n    let gradientDisplay;\r\n    let resizeTimer;\r\n    let regNotificationDisplay;\r\n    let logNotificationDisplay;\r\n\r\n    useLayoutEffect(() => {\r\n        context.assignShowNav(false);\r\n        if (token === 'register'){\r\n            setLoginRegister(true);\r\n        }\r\n        \r\n        else if (token === 'login') {\r\n            setLoginRegister(false);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async() => {\r\n        let response;\r\n        let json;\r\n\r\n        if (localStorage.getItem('token')) {\r\n            localStorage.removeItem('token');\r\n            context.assignFName('');\r\n            context.assignLName('');\r\n        }\r\n\r\n        if (token){\r\n            if (token !== 'register' || token !== 'login'){\r\n                response = await fetch(`/api/confirm_email/${token}`);\r\n                json = await response.json();\r\n    \r\n                if (json.message === 'token_expired') {\r\n                    setLogNotification(['Verification Token Expired!', 'Your verification token session has expired. Please press Resend to send another verification link to your email.', 'danger']);\r\n                    setLogShow(true);\r\n                }\r\n                else if (json.message === 'email_already_confirmed') {\r\n                    setLogNotification(['Account already verified!', 'You have already verified this account.', 'warning']);\r\n                    setLogShow(true);\r\n                }\r\n                else if (json.message === 'email_confirm_success') {\r\n                    setLogNotification(['Account verified successfully!', 'Thank you for verifying your account. You may now log in.', 'success']);\r\n                    setLogShow(true);\r\n                }\r\n            }\r\n        }\r\n\r\n    }, []);\r\n\r\n    window.addEventListener(\"resize\", () => {\r\n    document.body.classList.add(\"resize-animation-stopper\");\r\n    clearTimeout(resizeTimer);\r\n    resizeTimer = setTimeout(() => {\r\n        document.body.classList.remove(\"resize-animation-stopper\");\r\n    }, 400);\r\n    });\r\n\r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: loadingData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: \"xMidYMid slice\"\r\n        }\r\n      };\r\n\r\n    const assignAuthEmail = (email) => {\r\n        setAuthEmail(email);\r\n    }\r\n\r\n    const assignRegNotif = (regNotif) => {\r\n        setRegNotification(regNotif);\r\n    }\r\n\r\n    const assignLogNotif = (logNotif) => {\r\n        setLogNotification(logNotif);\r\n    }\r\n\r\n    const regNotifClose = () => {\r\n        setRegShow(true);\r\n        setRegNotification([]);\r\n    }\r\n\r\n    const logNotifClose = () => {\r\n        setLogShow(true);\r\n        setLogNotification([]);\r\n    }\r\n\r\n    const handleResendToken = async() => {\r\n        let response;\r\n        let json;\r\n\r\n        setLoading(true);\r\n\r\n        response = await fetch('/api/resendToken', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email: authEmail\r\n            })\r\n        })\r\n\r\n        json = await response.json();\r\n\r\n        setLoading(false);\r\n\r\n\r\n    }\r\n\r\n    //Check for which screen the user is currently on (login or register)\r\n    if (loginRegister) {\r\n            gradientDisplay = ( <div className=\"gradient-display-background gradient-display-background-register\">\r\n                                    <div className='gradient-display gradient-display-register-rtrue'>\r\n                                        <h1 className='gradient-display-text'>Already have an account?</h1>\r\n                                        <button  onClick={() => {\r\n                                            setRegShow(false);\r\n                                            setRegNotification([]);\r\n                                            setLoginRegister(false)}} className='gradient-display-button gradient-display-button-red'>Login</button>\r\n                                    </div>\r\n                                    <div className='gradient-display gradient-display-register-bfalse'></div>\r\n                                </div>);\r\n    }\r\n\r\n    else {\r\n            gradientDisplay = ( <div className=\"gradient-display-background gradient-display-background-login\">\r\n                                    <div className='gradient-display gradient-display-login-rfalse'></div>\r\n                                    <div className='gradient-display gradient-display-login-btrue'>\r\n                                        <h1 className='gradient-display-text'>Don't have an account?</h1>\r\n                                        <button onClick={() => {\r\n                                            setLogShow(false);\r\n                                            setLogNotification([]);\r\n                                            setLoginRegister(true)}} className='gradient-display-button gradient-display-button-blue'>Register</button>\r\n                                    </div>\r\n                                </div>);\r\n    }\r\n\r\n    //Show any registration notifications\r\n    if (regNotification.length) {\r\n        regNotificationDisplay = (  <Alert className='alert-align auth-index' variant={regNotification[2]} onClose={() => regNotifClose()} dismissible>\r\n                                        <Alert.Heading>{regNotification[0]}</Alert.Heading>\r\n                                        <p>{regNotification[1]}</p>\r\n                                        {(regNotification[0] === 'Registration Successful!') && (<div className=\"d-flex justify-content-end\">\r\n                                            <Button onClick={() => handleResendToken()} variant=\"outline-success\" disabled={loading}>\r\n                                                {!loading && 'Resend'}\r\n                                                {loading && <Lottie options={defaultOptions} height={35} width={35}></Lottie>}\r\n                                            </Button>\r\n                                        </div>)}\r\n                                    </Alert>);\r\n        (regShow !== true) && setRegShow(true);\r\n    }\r\n\r\n    if (logNotification.length) {\r\n        logNotificationDisplay  = ( <Alert className='alert-align' variant={logNotification[2]} onClose={() => logNotifClose()} dismissible>\r\n                                        <Alert.Heading>{logNotification[0]}</Alert.Heading>\r\n                                        <p>{logNotification[1]}</p>\r\n                                        {(logNotification[0] === 'Account not verified!') && (<div className=\"d-flex justify-content-end\">\r\n                                            <Button onClick={() => handleResendToken()} variant=\"outline-warning\" disabled={loading}>\r\n                                                {!loading && 'Resend'}\r\n                                                {loading && <Lottie options={defaultOptions} height={35} width={35}></Lottie>}\r\n                                            </Button>\r\n                                        </div>)}\r\n                                    </Alert>);\r\n        (logShow !== true) && setLogShow(true);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"auth-container\">\r\n            <Link className={`auth-logo ${(loginRegister) ? 'auth-logo-register' : 'auth-logo-login'}`} to='/'>Diabetes Doctor</Link>\r\n            {gradientDisplay}\r\n\r\n            <div className='fill'>\r\n                \r\n                \r\n                <CSSTransition\r\n                    in={loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"reg-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <div className='auth-notification-container'>\r\n                        {regShow && regNotificationDisplay}\r\n                    </div>\r\n                </CSSTransition>\r\n                \r\n                <CSSTransition\r\n                    in={loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"reg-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <Register assignRegNotif={(regNotif) => assignRegNotif(regNotif)}\r\n                              assignAuthEmail={(email) => assignAuthEmail(email)}/>\r\n                </CSSTransition>\r\n            </div>\r\n            <div className='fill'>\r\n                \r\n                <CSSTransition\r\n                    in={!loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"login-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <div className='auth-notification-container'>\r\n                        {logShow && logNotificationDisplay}\r\n                    </div>\r\n                </CSSTransition>\r\n                <CSSTransition\r\n                    in={!loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"login-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <Login assignLogNotif={(logNotif) => assignLogNotif(logNotif)}\r\n                           assignAuthEmail={(email) => assignAuthEmail(email)}/>\r\n                </CSSTransition>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth;\r\n","import React, { useState, Fragment, useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\r\nimport Wave from 'react-wavify';\r\nimport '../css/Navigation.css';\r\nimport Context from '../utils/context';\r\n\r\nconst Navigation = () => {\r\n    const context = useContext(Context);\r\n    const [navbarColor, setNavbarColor] = useState('Home');\r\n    let rightNav;\r\n\r\n    const getUserInfo = async () => {\r\n        let response = await fetch('/api/user', {headers: { 'x-access-tokens': localStorage.getItem('token')}});\r\n        let json = await response.json();\r\n        context.assignFName(json.firstName);\r\n        context.assignLName(json.lastName);\r\n    }\r\n    const signoutUser = () => {\r\n        localStorage.removeItem('token');\r\n        context.assignFName('');\r\n        context.assignLName('');\r\n    }\r\n\r\n    if (localStorage.getItem('token')) {\r\n        if (context.stateFName === '' && context.stateLName === '') {\r\n            getUserInfo();\r\n        }\r\n        rightNav = (<Fragment>\r\n                        <NavDropdown alignRight title={`Welcome, ${context.stateFName} ${context.stateLName}`} id=\"collasible-nav-dropdown\" className='navbar-profile-dropdown'>\r\n                            <NavDropdown.Item onClick={() => signoutUser()}>\r\n                                Sign out\r\n                            </NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Fragment>);\r\n    } else {\r\n        rightNav = (<Fragment>\r\n            <Nav.Link>\r\n                <Link to=\"/auth/register\" onClick={() => setNavbarColor('Home')} className=\"navbar-item-button-c\">\r\n                    <button className='navbar-signup-c'>Sign up</button>\r\n                </Link>\r\n            </Nav.Link>\r\n            <Nav.Link>\r\n                <Link to=\"/auth/login\" onClick={() => setNavbarColor('Home')} className=\"navbar-item-button-c\">\r\n                    <button className='navbar-signin-c'>Sign in</button>\r\n                </Link>\r\n            </Nav.Link>\r\n        </Fragment>);\r\n    }\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" className='navbar-c'>\r\n                <Navbar.Brand>\r\n                    <Link to='/' onClick={() => setNavbarColor('Home')} className='navbar-item-c navbar-item-width-height navbar-title'>\r\n                        Diabetes Doctor\r\n                    </Link>\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className='m-auto navbar-item-font'>\r\n                        <Nav.Link>\r\n                            <Link to='/predict' onClick={() => setNavbarColor('Predictor')} className={`navbar-item-c navbar-item-width-height ${(navbarColor === 'Predictor') ? 'navbar-selected' : 'navbar-item-normal'}`}>\r\n                                Predictor\r\n                            </Link>\r\n                        </Nav.Link>\r\n                        <Nav.Link>\r\n                            <Link to='/track' onClick={() => setNavbarColor('Tracker')} className={`navbar-item-c navbar-item-width-height ${(navbarColor === 'Tracker') ? 'navbar-selected' : 'navbar-item-normal'}`}>\r\n                                Tracker\r\n                            </Link>\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                    <Nav>\r\n                        {rightNav}\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            <Wave fill='#fff'\r\n                paused={false}\r\n                className='navbar-wave navbar-wave-1'\r\n                options={{\r\n                height: 15,\r\n                amplitude: 20,\r\n                speed: 0.15,\r\n                points: 4\r\n                }}\r\n            />\r\n\r\n            <Wave fill='#f6f6f6'\r\n                paused={false}\r\n                className='navbar-wave navbar-wave-2'\r\n                options={{\r\n                height: 20,\r\n                amplitude: 25,\r\n                speed: 0.15,\r\n                points: 3\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default Navigation","import React, { useLayoutEffect, useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport Context from '../utils/context';\r\n\r\nconst Tracker = () => {\r\n    const context = useContext(Context);\r\n\r\n    useLayoutEffect(() => {\r\n        context.assignShowNav(true);\r\n    }, []);\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Tracker</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tracker; \r\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Context from './utils/context';\nimport Home from './components/Home';\nimport Predictor from './components/Predictor';\nimport Result from './components/Result';\nimport Auth from './components/Auth';\nimport Navigation from './components/Navigation';\nimport Tracker from './components/Tracker';\n\nfunction App() {\n  const [prediction, setPrediction] = useState(false);\n  const [showNav, setShowNav] = useState(true);\n  const [token, setToken] = useState();\n  const [fName, setFName] = useState('');\n  const [lName, setLName] = useState('');\n\n  const assignPrediction = (pred) => {\n    setPrediction(pred);\n  }\n\n  const assignToken = (token) => {\n    setToken(token);\n  }\n  \n  const assignShowNav = (show) => {\n    setShowNav(show);\n  }\n\n  const assignFName = (firstname) => {\n    setFName(firstname);\n  }\n\n  const assignLName = (lastname) => {\n    setLName(lastname);\n  }\n  \n  return (\n    <Context.Provider value = {{\n      statePrediction: prediction,\n      assignPredictionFunction: (pred) => assignPrediction(pred),\n      stateToken: token,\n      assignTokenFunction: (token) => assignToken(token),\n      stateNav: showNav,\n      assignShowNav: (show) => assignShowNav(show),\n      stateFName: fName,\n      assignFName: (firstname) => assignFName(firstname),\n      stateLName: lName,\n      assignLName: (lastname) => assignLName(lastname)\n    }}>\n      <Router>\n        <div className=\"App\">\n          {(showNav) && <Navigation />}\n          <Switch>\n            <Route exact path='/' component={Home}/>\n            <Route exact path='/predict' component={Predictor}/>\n            <Route exact path='/track' component={Tracker}/>\n            <Route exact path='/results' component={Result}/>\n            <Route exact path='/auth/:token?' component={Auth}/>\n          </Switch>\n        </div>\n      </Router>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}