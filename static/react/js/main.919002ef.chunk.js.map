{"version":3,"sources":["utils/context.js","components/Home.js","components/PredictorForm.js","components/Result.js","components/Login.js","components/Register.js","components/Auth.js","App.js","index.js"],"names":["Context","createContext","Home","to","PredictorForm","history","useHistory","context","useContext","useState","pregnancies","setPregnancies","glucose","setGlucose","bloodpressure","setBloodpressure","skinthickness","setSkinthickness","insulin","setInsulin","bmi","setBmi","dpf","setDpf","age","setAge","handleSubmit","e","a","preventDefault","fetch","method","headers","body","JSON","stringify","response","json","console","log","assignPredictionFunction","push","onSubmit","className","type","placeholder","onChange","target","value","Result","result","statePrediction","Login","props","showPasswordIcon","passwordType","email","setEmail","password","setPassword","fName","setFName","lName","setLName","showPassword","setShowPassword","assignTokenFunction","token","firstName","lastName","onClick","Register","regFormPage","confirmPasswordType","showConfirmPasswordIcon","setFirstName","setLastName","confirmPassword","setConfirmPassword","phoneNumber","setPhoneNumber","nameEmailPassword","setNameEmailPassword","showConfirmPassword","setShowConfirmPassword","submittedOnce","setSubmittedOnce","submitted","setSubmitted","firstNameError","setFirstNameError","lastNameError","setLastNameError","emailError","setEmailError","phoneNumberError","setPhoneNumberError","passwordError","setPasswordError","firstNameBorder","lastNameBorder","emailBorder","phoneNumberBorder","passwordBorder","healthCard","length","test","Auth","gradientDisplay","resizeTimer","loginRegister","setLoginRegister","window","addEventListener","document","classList","add","clearTimeout","setTimeout","remove","assignLoginRegister","loginRegisterState","CSSTransition","in","timeout","classNames","unmountOnExit","assignLoginReg","App","prediction","setPrediction","setToken","Provider","pred","assignPrediction","stateToken","assignToken","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"js/main.919002ef.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst Context = createContext();\r\n\r\nexport default Context;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <h1>Home</h1>\r\n            <Link to='/predict'>Go To Predictor</Link><br />\r\n            <Link to='/auth'>Go To Login/Register</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useContext } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport Context from '../utils/context';\r\n\r\nconst PredictorForm = () => {\r\n    //Values that give a prediction outcome of True (Have Diabetes) for\r\n    //the Random Forest Classification model:\r\n    \r\n    //const testData = {\r\n    //    pregnancies: 1,\r\n    //    glucose: 117,\r\n    //    bloodpressure: 88,\r\n    //    skinthickness: 24,\r\n    //    insulin: 145,\r\n    //    bmi: 34.5,\r\n    //    dpf: 0.403,\r\n    //    age: 40\r\n    //}\r\n    \r\n    let history = useHistory();\r\n    const context = useContext(Context);\r\n\r\n    const [pregnancies, setPregnancies] = useState(0);\r\n    const [glucose, setGlucose] = useState(0);\r\n    const [bloodpressure, setBloodpressure] = useState(0);\r\n    const [skinthickness, setSkinthickness] = useState(0);\r\n    const [insulin, setInsulin] = useState(0);\r\n    const [bmi, setBmi] = useState(0);\r\n    const [dpf, setDpf] = useState(0);\r\n    const [age, setAge] = useState(0);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n            const response = await fetch('/api/predict', {\r\n                method: 'POST',\r\n                headers: {\r\n                'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    pregnancies,\r\n                    glucose,\r\n                    bloodpressure,\r\n                    skinthickness,\r\n                    insulin,\r\n                    bmi,\r\n                    dpf,\r\n                    age\r\n                })\r\n            })\r\n\r\n            const json = await response.json();\r\n            console.log(json[0]);\r\n            context.assignPredictionFunction(json[0])\r\n            history.push('/results')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Predictor Form</h1>\r\n            \r\n            <form onSubmit={handleSubmit} className=\"predict-container\">\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Pregnancies\" onChange={e => setPregnancies(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Glucose\" onChange={e => setGlucose(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Bloodpressure\" onChange={e => setBloodpressure(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Skinthickness\" onChange={e => setSkinthickness(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Insulin\" onChange={e => setInsulin(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Bmi\" onChange={e => setBmi(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Dpf\" onChange={e => setDpf(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Age\" onChange={e => setAge(e.target.value)}/>\r\n                <button className=\"predict-form-item\" type=\"submit\">Predict</button>\r\n            </form>\r\n            <Link to='/'>Go Home</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default PredictorForm;","import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Context from '../utils/context';\r\n\r\nconst Result = () => {\r\n    const context = useContext(Context);\r\n    let result;\r\n\r\n    if (context.statePrediction) {\r\n        result = <h2 className='result-bad'>Oops! You have DIABETES.</h2>;\r\n    }\r\n    else {\r\n        result = <h2 className='result-good'>Great! You DON'T have diabetes.</h2>;\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Results</h1>\r\n            {result}\r\n            <Link to='/predict'>Go to Predictor</Link>\r\n            <br />\r\n            <Link to='/'>Go home</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result;\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport '../css/Login.css';\r\nimport Context from '../utils/context'\r\n\r\nconst Login = (props) => {\r\n    const context = useContext(Context);\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [fName, setFName] = useState('');\r\n    const [lName, setLName] = useState('');\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    let showPasswordIcon;\r\n    let passwordType;\r\n\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n        let response;\r\n        let json;\r\n        //Perform front-end form validation before sending to posting to back-end\r\n        \r\n\r\n        //Post email and password to back end and get authenticated\r\n        response = await fetch('/api/login', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email,\r\n                password\r\n            })\r\n        })\r\n\r\n        json = await response.json();\r\n        context.assignTokenFunction(json.token);\r\n        console.log(json);\r\n\r\n        if (json.token){\r\n            response = await fetch('/api/user', {headers: { 'x-access-tokens': json.token}});\r\n            json = await response.json();\r\n            console.log(json.firstName);\r\n            setFName(', ' + json.firstName);\r\n            setLName(json.lastName);\r\n        }\r\n        \r\n    }\r\n\r\n    if (showPassword) {\r\n        showPasswordIcon = (\r\n            <div className='hide-password' onClick={() => setShowPassword(false)}></div>\r\n        );\r\n\r\n        passwordType = 'text';\r\n    } else {\r\n        showPasswordIcon = (\r\n            <div className='show-password' onClick={() => setShowPassword(true)}></div>\r\n        );\r\n\r\n        passwordType = 'password';\r\n    }\r\n\r\n    //Password field should be secured and should not be openly updated in state\r\n\r\n    return (\r\n        <div className='login-container'>\r\n            <h1 className='welcome-message'>Welcome{fName} {lName}</h1>\r\n            <form className='login-form' onSubmit={handleSubmit}>\r\n                <input className='login-form-item login-input' type='text' placeholder='Email' onChange={e => setEmail(e.target.value)}/>\r\n                <div className='password-container'>\r\n                    <input className='password-item login-input' type={passwordType} placeholder='Password' onChange={e => setPassword(e.target.value)}/>\r\n                    {showPasswordIcon}\r\n                </div>\r\n                <button className='login-form-item login-button' type='submit'>Sign in</button>\r\n            </form>\r\n            <h3 className='forgot-password'>Forgot your password?</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, { useState } from 'react';\r\nimport '../css/Register.css';\r\n\r\nconst Register = (props) => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n\r\n    const [nameEmailPassword, setNameEmailPassword] = useState(0);\r\n\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n\r\n    const [submittedOnce, setSubmittedOnce] = useState(false);\r\n    const [submitted, setSubmitted] = useState(false);\r\n\r\n    const [firstNameError, setFirstNameError] = useState('');\r\n    const [lastNameError, setLastNameError] = useState('');\r\n    const [emailError, setEmailError] = useState('');\r\n    const [phoneNumberError, setPhoneNumberError] = useState('');\r\n    const [passwordError, setPasswordError] = useState('');\r\n\r\n    let regFormPage;\r\n    let passwordType;\r\n    let confirmPasswordType;\r\n    let showPasswordIcon;\r\n    let showConfirmPasswordIcon;\r\n\r\n    let firstNameBorder = 'border-normal';\r\n    let lastNameBorder = 'border-normal';\r\n    let emailBorder = 'border-normal';\r\n    let phoneNumberBorder = 'border-normal';\r\n    let passwordBorder = 'border-normal';\r\n    \r\n    const handleNameNext = (e) => {\r\n        e.preventDefault();\r\n        setNameEmailPassword(1);\r\n    }\r\n\r\n    const handleEmailNext = (e) => {\r\n        e.preventDefault();\r\n        setNameEmailPassword(2);\r\n    }\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n\r\n        setSubmittedOnce(true);\r\n        setSubmitted(true);\r\n\r\n        if (firstNameError || lastNameError || emailError || phoneNumberError || passwordError) {\r\n            return;\r\n        }\r\n\r\n        const response = await fetch('/api/register', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                firstName,\r\n                lastName,\r\n                email,\r\n                healthCard: '',\r\n                phoneNumber,\r\n                password\r\n            })\r\n        })\r\n\r\n        const json = await response.json();\r\n        console.log(json);\r\n    }\r\n\r\n    const validateEmail = address => {\r\n        return /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(address);\r\n    }\r\n\r\n    const isNumber = phone => {\r\n        return /^\\d*$/.test(phone);\r\n    }\r\n\r\n    //Decides whether the password is currently shown or not\r\n    if (showPassword) {\r\n        showPasswordIcon = (\r\n            <div className='hide-password' onClick={() => setShowPassword(false)}></div>\r\n        );\r\n\r\n        passwordType = 'text';\r\n    } else {\r\n        showPasswordIcon = (\r\n            <div className='show-password' onClick={() => setShowPassword(true)}></div>\r\n        );\r\n\r\n        passwordType = 'password';\r\n    }\r\n\r\n\r\n    //Decides whether the confirm password is currently shown or not\r\n    if (showConfirmPassword) {\r\n        showConfirmPasswordIcon = (\r\n            <div className='hide-password' onClick={() => setShowConfirmPassword(false)}></div>\r\n        );\r\n\r\n        confirmPasswordType = 'text';\r\n    } else {\r\n        showConfirmPasswordIcon = (\r\n            <div className='show-password' onClick={() => setShowConfirmPassword(true)}></div>\r\n        );\r\n\r\n        confirmPasswordType = 'password';\r\n    }\r\n\r\n\r\n\r\n/////////////// FRONTEND ERROR-CHECKING ////////////////////\r\n\r\n    //Check for Password and Confirm Password errors\r\n    if ((password === '')){\r\n        (passwordError !== 'A password is required') && setPasswordError('A password is required');\r\n    }\r\n\r\n    else if ((password.length < 8)) {\r\n        (passwordError !== 'The password must be at least 8 characters long') && setPasswordError('The password must be at least 8 characters long');\r\n    }\r\n\r\n    else if ((password !== confirmPassword)){\r\n        (passwordError !== 'The passwords do not match') && setPasswordError('The passwords do not match');\r\n    }\r\n    else {\r\n        (passwordError !== '') && setPasswordError('');\r\n    }\r\n\r\n    \r\n    //Check for Email errors\r\n    if ((email === '')){\r\n        (emailError !== 'An email is required') && setEmailError('An email is required');\r\n    }\r\n    else if ((!validateEmail(email))) {\r\n        (emailError !== 'You have entered an invalid email') && setEmailError('You have entered an invalid email');\r\n    }\r\n    else {\r\n        (emailError !== '') && setEmailError('');\r\n    }\r\n\r\n    //Check for Phone Number (optional) errors\r\n    if (!isNumber(phoneNumber)) {\r\n        (phoneNumberError !== 'The phone number may only contain numbers') && setPhoneNumberError('The phone number may only contain numbers');\r\n    }\r\n    else {\r\n        (phoneNumberError !== '') && setPhoneNumberError('');\r\n    }\r\n\r\n    //Check for First Name errors\r\n    if ((firstName === '')){\r\n        (firstNameError !== 'A first name is required') && setFirstNameError('A first name is required');\r\n    } \r\n    else {\r\n        (firstNameError !== '') && setFirstNameError('');\r\n    }\r\n\r\n    //Check for Last Name errors\r\n    if ((lastName === '')){\r\n        (lastNameError !== 'A last name is required') && setLastNameError('A last name is required');\r\n    }\r\n    else {\r\n        (lastNameError !== '') && setLastNameError('');\r\n    }\r\n\r\n    //Change register form to the first known error\r\n    if ((firstNameError || lastNameError) && submitted) {\r\n        (nameEmailPassword !== 0) && setNameEmailPassword(0);\r\n        setSubmitted(false);\r\n    }\r\n    else if ((emailError || phoneNumberError) && submitted) {\r\n        (nameEmailPassword !== 1) && setNameEmailPassword(1);\r\n        setSubmitted(false);\r\n    }\r\n    else if (passwordError && submitted) {\r\n        (nameEmailPassword !==2) && setNameEmailPassword(2);\r\n        setSubmitted(false);\r\n    }\r\n\r\n    //Set error borders on inputs\r\n    if (firstNameError) {\r\n        firstNameBorder = 'border-error';\r\n    }\r\n\r\n    if (lastNameError) {\r\n        lastNameBorder = 'border-error';\r\n    }\r\n\r\n    if (emailError) {\r\n        emailBorder = 'border-error';\r\n    }\r\n\r\n    if (phoneNumberError) {\r\n        phoneNumberBorder = 'border-error';\r\n    }\r\n\r\n    if (passwordError) {\r\n        passwordBorder = 'border-error';\r\n    }\r\n////////////////////////////////////////////////////////////\r\n    \r\n\r\n    if (nameEmailPassword === 0) {\r\n        regFormPage = (\r\n            <form className='register-form' onSubmit={handleNameNext}>\r\n                <h3 className='input-error-message'>{(submittedOnce) ? firstNameError : null}</h3>\r\n                <input className={`register-form-item register-input ${(submittedOnce) ? firstNameBorder: 'border-normal'}`} value={firstName} type='text' placeholder='First Name' onChange={e => setFirstName(e.target.value)}/>\r\n                <h3 className='input-error-message'>{(submittedOnce) ? lastNameError : null}</h3>\r\n                <input className={`register-form-item register-input ${(submittedOnce) ? lastNameBorder: 'border-normal'}`} value={lastName} type='text' placeholder='Last Name' onChange={e => setLastName(e.target.value)}/>\r\n                <div className='submission-buttons'>\r\n                    <button className='register-form-item register-button' type='submit'>Next</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    else if (nameEmailPassword === 1) {\r\n        regFormPage = (\r\n            <form className='register-form' onSubmit={handleEmailNext}>\r\n                <h3 className='input-error-message'>{(submittedOnce) ? emailError : null}</h3>\r\n                <input className={`register-form-item register-input ${(submittedOnce) ? emailBorder: 'border-normal'}`} value={email} type='text' placeholder='Email' onChange={e => setEmail(e.target.value)}/>\r\n                <h3 className='input-error-message'>{(submittedOnce) ? phoneNumberError : null}</h3>\r\n                <input className={`register-form-item register-input ${(submittedOnce) ? phoneNumberBorder: 'border-normal'}`} value={phoneNumber} type='text' placeholder='Phone Number' onChange={e => setPhoneNumber(e.target.value)}/>\r\n                <div></div>\r\n                <div className='submission-buttons'>\r\n                    <button className='register-form-item back-button' type='button' onClick={() => setNameEmailPassword(0)}>Back</button>\r\n                    <div className='register-form-item'></div>\r\n                    <button className='register-form-item register-button' type='submit'>Next</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    else {\r\n        regFormPage = (\r\n            <form className='register-form' onSubmit={handleSubmit}>\r\n                <h3 className='input-error-message'>{(submittedOnce) ? passwordError : null}</h3>\r\n                <div className='password-container'>\r\n                    <input className={`password-item register-input ${(submittedOnce) ? passwordBorder: 'border-normal'}`} type={passwordType} value={password} placeholder='Password' onChange={e => setPassword(e.target.value)}/>\r\n                    {showPasswordIcon}\r\n                </div>\r\n                <div className='password-container'>\r\n                    <input className={`password-item register-input ${(submittedOnce) ? passwordBorder: 'border-normal'}`} type={confirmPasswordType} value={confirmPassword} placeholder='Confirm Password' onChange={e => setConfirmPassword(e.target.value)}/>\r\n                    {showConfirmPasswordIcon}\r\n                </div>\r\n                <div className='submission-buttons'>\r\n                    <button className='register-form-item back-button' type='button' onClick={() => setNameEmailPassword(1)}>Back</button>\r\n                    <div className='register-form-item'></div>\r\n                    <button className='register-form-item register-button' type='submit'>Sign up</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n     //Password field should be secured and should not be openly updated in state\r\n\r\n    return (\r\n        <div className='register-container'>\r\n            <h1 className='welcome-message'>Create account</h1>\r\n            {regFormPage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n","import React, { useState } from 'react';\r\nimport Login from './Login';\r\nimport Register from './Register';\r\nimport { CSSTransition } from 'react-transition-group'; \r\nimport '../css/Auth.css';\r\n\r\nconst Auth = () => {\r\n    const [loginRegister, setLoginRegister] = useState(false);\r\n    let gradientDisplay;\r\n    let resizeTimer;\r\n\r\n    window.addEventListener(\"resize\", () => {\r\n    document.body.classList.add(\"resize-animation-stopper\");\r\n    clearTimeout(resizeTimer);\r\n    resizeTimer = setTimeout(() => {\r\n        document.body.classList.remove(\"resize-animation-stopper\");\r\n    }, 400);\r\n    });\r\n\r\n    const assignLoginRegister = (loginRegisterState) => {\r\n        setLoginRegister(loginRegisterState);\r\n    }\r\n\r\n    if (loginRegister) {\r\n            gradientDisplay = ( <div className=\"gradient-display-background gradient-display-background-register\">\r\n                                    <div className='gradient-display gradient-display-register-rtrue'>\r\n                                        <h1 className='gradient-display-text'>Already have an account?</h1>\r\n                                        <button  onClick={() => setLoginRegister(false)} className='gradient-display-button gradient-display-button-red'>Login</button>\r\n                                    </div>\r\n                                    <div className='gradient-display gradient-display-register-bfalse'></div>\r\n                                </div>);\r\n    }\r\n\r\n    else {\r\n            gradientDisplay = ( <div className=\"gradient-display-background gradient-display-background-login\">\r\n                                    <div className='gradient-display gradient-display-login-rfalse'></div>\r\n                                    <div className='gradient-display gradient-display-login-btrue'>\r\n                                        <h1 className='gradient-display-text'>Don't have an account?</h1>\r\n                                        <button onClick={() => setLoginRegister(true)} className='gradient-display-button gradient-display-button-blue'>Register</button>\r\n                                    </div>\r\n                                </div>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"auth-container\">\r\n            {gradientDisplay}\r\n\r\n            <div className='fill'>\r\n                <CSSTransition\r\n                    in={loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"reg-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <Register assignLoginReg={(loginRegisterState) => assignLoginRegister(loginRegisterState)}/>\r\n                </CSSTransition>\r\n            </div>\r\n            <div className='fill'>\r\n                <CSSTransition\r\n                    in={!loginRegister}\r\n                    timeout={500}\r\n                    classNames=\"login-transition\"\r\n                    unmountOnExit\r\n                >\r\n                    <Login assignLoginReg={(loginRegisterState) => assignLoginRegister(loginRegisterState)}/>\r\n                </CSSTransition>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth;\r\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Context from './utils/context';\nimport Home from './components/Home';\nimport PredictorForm from './components/PredictorForm';\nimport Result from './components/Result';\nimport Auth from './components/Auth';\n\nfunction App() {\n  const [prediction, setPrediction] = useState(false);\n  const [token, setToken] = useState();\n\n  const assignPrediction = (pred) => {\n    setPrediction(pred);\n  }\n\n  const assignToken = (token) => {\n    setToken(token);\n  }\n  \n  return (\n    <Context.Provider value = {{\n      statePrediction: prediction,\n      assignPredictionFunction: (pred) => assignPrediction(pred),\n      stateToken: token,\n      assignTokenFunction: (token) => assignToken(token)\n    }}>\n      <Router>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path='/' component={Home}/>\n            <Route exact path='/predict' component={PredictorForm}/>\n            <Route exact path='/results' component={Result}/>\n            <Route exact path='/auth' component={Auth}/>\n          </Switch>\n        </div>\n      </Router>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}