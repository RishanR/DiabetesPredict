{"version":3,"sources":["utils/context.js","components/Home.js","components/PredictorForm.js","components/Result.js","App.js","index.js"],"names":["Context","createContext","Home","to","PredictorForm","history","useHistory","context","useContext","useState","pregnancies","setPregnancies","glucose","setGlucose","bloodpressure","setBloodpressure","skinthickness","setSkinthickness","insulin","setInsulin","bmi","setBmi","dpf","setDpf","age","setAge","handleSubmit","e","a","preventDefault","fetch","method","headers","body","JSON","stringify","response","json","console","log","assignPredictionFunction","push","onSubmit","className","type","placeholder","onChange","target","value","Result","result","statePrediction","App","prediction","setPrediction","Provider","pred","assignPrediction","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"js/main.fea22282.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst Context = createContext();\r\n\r\nexport default Context;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <h1>Home</h1>\r\n            <Link to='/predict'>Go To Predictor</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useContext } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport Context from '../utils/context';\r\n\r\nconst PredictorForm = () => {\r\n    //Values that give a prediction outcome of True (Have Diabetes) for\r\n    //the Random Forest Classification model:\r\n    \r\n    //const testData = {\r\n    //    pregnancies: 1,\r\n    //    glucose: 117,\r\n    //    bloodpressure: 88,\r\n    //    skinthickness: 24,\r\n    //    insulin: 145,\r\n    //    bmi: 34.5,\r\n    //    dpf: 0.403,\r\n    //    age: 40\r\n    //}\r\n    \r\n    let history = useHistory();\r\n    const context = useContext(Context);\r\n\r\n    const [pregnancies, setPregnancies] = useState(0);\r\n    const [glucose, setGlucose] = useState(0);\r\n    const [bloodpressure, setBloodpressure] = useState(0);\r\n    const [skinthickness, setSkinthickness] = useState(0);\r\n    const [insulin, setInsulin] = useState(0);\r\n    const [bmi, setBmi] = useState(0);\r\n    const [dpf, setDpf] = useState(0);\r\n    const [age, setAge] = useState(0);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n            const response = await fetch('/api/predict', {\r\n                method: 'POST',\r\n                headers: {\r\n                'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    pregnancies,\r\n                    glucose,\r\n                    bloodpressure,\r\n                    skinthickness,\r\n                    insulin,\r\n                    bmi,\r\n                    dpf,\r\n                    age\r\n                })\r\n            })\r\n\r\n            const json = await response.json();\r\n            console.log(json[0]);\r\n            context.assignPredictionFunction(json[0])\r\n            history.push('/results')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Predictor Form</h1>\r\n            \r\n            <form onSubmit={handleSubmit} className=\"predict-container\">\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Pregnancies\" onChange={e => setPregnancies(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Glucose\" onChange={e => setGlucose(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Bloodpressure\" onChange={e => setBloodpressure(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Skinthickness\" onChange={e => setSkinthickness(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Insulin\" onChange={e => setInsulin(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Bmi\" onChange={e => setBmi(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Dpf\" onChange={e => setDpf(e.target.value)}/>\r\n                <input className=\"predict-form-item\" type=\"text\" placeholder=\"Age\" onChange={e => setAge(e.target.value)}/>\r\n                <button className=\"predict-form-item\" type=\"submit\">Predict</button>\r\n            </form>\r\n            <Link to='/'>Go Home</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default PredictorForm;","import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Context from '../utils/context';\r\n\r\nconst Result = () => {\r\n    const context = useContext(Context);\r\n    let result;\r\n\r\n    if (context.statePrediction) {\r\n        result = <h2 className='result-bad'>Oops! You have DIABETES.</h2>;\r\n    }\r\n    else {\r\n        result = <h2 className='result-good'>Great! You DON'T have diabetes.</h2>;\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Results</h1>\r\n            {result}\r\n            <Link to='/predict'>Go to Predictor</Link>\r\n            <br />\r\n            <Link to='/'>Go home</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result;\r\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Context from './utils/context';\nimport Home from './components/Home';\nimport PredictorForm from './components/PredictorForm';\nimport Result from './components/Result';\n\nfunction App() {\n  const [prediction, setPrediction] = useState(false);\n\n  const assignPrediction = (pred) => {\n    setPrediction(pred)\n  }\n  \n  return (\n    <Context.Provider value = {{\n      statePrediction: prediction,\n      assignPredictionFunction: (pred) => assignPrediction(pred)\n    }}>\n      <Router>\n        <div className=\"App\">\n          <h1>Diabetes Predictor</h1>\n          <Switch>\n            <Route exact path='/' component={Home}/>\n            <Route exact path='/predict' component={PredictorForm}/>\n            <Route exact path='/results' component={Result}/>\n          </Switch>\n        </div>\n      </Router>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}